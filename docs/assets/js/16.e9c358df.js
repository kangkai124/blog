(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{162:function(e,t,n){"use strict";n.r(t);var s=n(0),r=Object(s.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[e._m(0),e._m(1),e._m(2),n("p",[e._v("前端定义好路由，并且在路由上标记相应的权限信息")]),e._m(3),e._m(4),n("p",[e._v("这种方式，菜单可以直接用路由生成(用户没有权限的菜单也会显示，点击跳转的时候才做权限判断)，也可以在用户登录后根据用户权限把路由过滤一遍生成菜单(菜单需要保存在vuex里)。")]),n("blockquote",[n("p",[e._v("目前"),n("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fiview%2Fiview-admin%2Fblob%2Fdev%2Fsrc%2Frouter%2Findex.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("iview-admin"),n("OutboundLink")],1),e._v("还是用的这种方式")])]),e._m(5),e._m(6),e._m(7),n("p",[e._v("针对前一种实现方式的缺点，可以将登录页与主应用放到不同的页面(不在同一个vue应用实例里)。")]),e._m(8),n("p",[e._v("登录成功后，进行页面跳转(真正的页面跳转，不是路由跳转)，并将用户权限传递到主应用所在页面，主应用初始化之前，根据用户权限筛选路由，筛选后的路由作为vue的实例化参数，而不是像前一种方式所有的路由都传递进去，也不需要在全局路由守卫里做权限判断了。")]),e._m(9),e._m(10),e._m(11),e._m(12),e._m(13),n("p",[e._v("应用初始化的时候先挂载不需要权限控制的路由，比如登录页，404等错误页。")]),e._m(14),e._m(15),e._m(16),e._m(17),n("p",[e._v("关键的代码如下")]),e._m(18),n("blockquote",[n("p",[e._v("上面的代码就是"),n("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FPanJiaChen%2Fvue-element-admin",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue-element-admin"),n("OutboundLink")],1),e._v("的实现")])]),e._m(19),e._m(20),e._m(21),n("p",[e._v("菜单的显示标题，图片等需要随时更改，要对菜单做管理功能。")]),n("p",[e._v("后端直接根据用户权限返回可访问的菜单。")]),e._m(22),n("p",[e._v("前端定义路由信息(标准的路由定义，不需要加其他标记字段)。")]),e._m(23),n("p",[e._v("name字段都不为空，需要根据此字段与后端返回菜单做关联。")]),n("p",[e._v("做菜单管理功能的时候，一定要有个字段与前端的路由的name字段对应上(也可以是其他字段，只要菜单能找到对应的路由或者路由能找到对应的菜单就行)，并且做唯一性校验。菜单上还需要定义权限字段，可以是一个或多个。其他信息，比如显示标题，图标，排序，锁定之类的，可以根据实际需求进行设计。")]),e._m(24),n("p",[e._v("还是在全局路由守卫里做判断")]),e._m(25),n("p",[e._v("上面代码是"),n("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fwjkang%2Fvue-quasar-admin",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue-quasar-admin"),n("OutboundLink")],1),e._v("的实现。因为没有使用"),n("code",[e._v("addRoutes")]),e._v(",每次路由跳转的时候都要判断权限，这里的判断也很简单，因为菜单的name与路由的name是一一对应的,而后端返回的菜单就已经是经过权限过滤的，所以如果根据路由name找不到对应的菜单，就表示用户有没权限访问。")]),e._m(26),e._m(27),e._m(28),e._m(29),n("p",[e._v("菜单由后端返回是可行的，但是路由由后端返回呢？看一下路由的定义")]),e._m(30),n("p",[e._v("后端如果直接返回")]),e._m(31),e._m(32),e._m(33),n("p",[e._v("前端统一定义路由组件，比如")]),e._m(34),n("p",[e._v("将路由组件定义为这种key-value的结构。")]),n("p",[e._v("后端返回格式")]),e._m(35),e._m(36),n("p",[e._v("至于菜单与路由是否还要分离，怎么对应，可以根据实际需求进行处理。")]),n("p",[e._v("如果有嵌套路由，后端功能设计的时候，要注意添加相应的字段。前端拿到数据也要做相应的处理。")]),e._m(37),e._m(38),e._m(39),e._m(40),e._m(41),n("p",[e._v("应用初始化的时候只挂载不需要权限控制的路由")]),e._m(42),e._m(43),e._m(44),e._m(45),e._m(46),e._m(47),e._m(48),e._m(49),n("p",[e._v("init组件里判断应用是否已经初始化(避免初始化后，直接从地址栏输入地址再次进入当前组件)。")]),e._m(50),e._m(51),n("blockquote",[n("p",[n("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fcodesandbox.io%2Fs%2Fr02zvvlpno",target:"_blank",rel:"noopener noreferrer"}},[e._v("实现例子"),n("OutboundLink")],1)])]),e._m(52),e._m(53),e._m(54),n("p",[e._v("比较推荐后面两种实现方式。")]),n("blockquote",[n("p",[e._v("原文："),n("a",{attrs:{href:"https://juejin.im/post/5b5bfd5b6fb9a04fdd7d687a",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://juejin.im/post/5b5bfd5b6fb9a04fdd7d687a"),n("OutboundLink")],1)])])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"vue权限路由实现方式总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue权限路由实现方式总结","aria-hidden":"true"}},[this._v("#")]),this._v(" vue权限路由实现方式总结")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"使用全局路由守卫"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用全局路由守卫","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用全局路由守卫")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("const routerMap = [\n  {\n    path: '/permission',\n    component: Layout,\n    redirect: '/permission/index',\n    alwaysShow: true, // will always show the root menu\n    meta: {\n      title: 'permission',\n      icon: 'lock',\n      roles: ['admin', 'editor'] // you can set roles in root nav\n    },\n    children: [{\n      path: 'page',\n      component: () => import('@/views/permission/page'),\n      name: 'pagePermission',\n      meta: {\n        title: 'pagePermission',\n        roles: ['admin'] // or you can only set roles in sub nav\n      }\n    }, {\n      path: 'directive',\n      component: () => import('@/views/permission/directive'),\n      name: 'directivePermission',\n      meta: {\n        title: 'directivePermission'\n        // if do not set roles, means: this page does not require permission\n      }\n    }]\n  }]\n复制代码\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("全局路由守卫每次都判断用户是否已经登录，没有登录则跳到登录页。已经登录(已经取得后台返回的用户的权限信息(角色之类的))，则判断当前要跳转的路由，用户是否有权限访问(根据路由名称到全部路由里找到对应的路由，判断用户是否具备路由上标注的权限信息(比如上面的"),t("code",[this._v("roles: ['admin', 'editor']")]),this._v("))。没有权限则跳到事先定义好的界面(403,404之类的)。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点","aria-hidden":"true"}},[this._v("#")]),this._v(" 缺点")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("加载所有的路由，如果路由很多，而用户并不是所有的路由都有权限访问，对性能会有影响。")]),t("li",[this._v("全局路由守卫里，每次路由跳转都要做权限判断。")]),t("li",[this._v("菜单信息写死在前端，要改个显示文字或权限信息，需要重新编译")]),t("li",[this._v("菜单跟路由耦合在一起，定义路由的时候还有添加菜单显示标题，图标之类的信息，而且路由不一定作为菜单显示，还要多加字段进行标识")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"登录页与主应用分离"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#登录页与主应用分离","aria-hidden":"true"}},[this._v("#")]),this._v(" 登录页与主应用分离")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"实现-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"缺点-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 缺点")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("需要做页面跳转，不是纯粹的单页应用")]),t("li",[this._v("菜单信息写死在前端，要改个显示文字或权限信息，需要重新编译")]),t("li",[this._v("菜单跟路由耦合在一起，定义路由的时候还有添加菜单显示标题，图标之类的信息，而且路由不一定作为菜单显示，还要多加字段进行标识")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"使用addroutes动态挂载路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用addroutes动态挂载路由","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用"),t("code",[this._v("addRoutes")]),this._v("动态挂载路由")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("addRoutes")]),this._v("允许在应用初始化之后，动态的挂载路由。有了这个新姿势，就不用像前一种方式那样要在应用初始化之要对路由进行筛选。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"实现-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现-3","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("有个问题，"),t("code",[this._v("addRoutes")]),this._v("应该何时调用，在哪里调用")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("登录后，获取用户的权限信息，然后筛选有权限访问的路由，再调用"),t("code",[this._v("addRoutes")]),this._v("添加路由。这个方法是可行的。但是不可能每次进入应用都需要登录，用户刷新浏览器又要登陆一次。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("所以"),t("code",[this._v("addRoutes")]),this._v("还是要在全局路由守卫里进行调用")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("import router from './router'\nimport store from './store'\nimport { Message } from 'element-ui'\nimport NProgress from 'nprogress' // progress bar\nimport 'nprogress/nprogress.css'// progress bar style\nimport { getToken } from '@/utils/auth' // getToken from cookie\n\nNProgress.configure({ showSpinner: false })// NProgress Configuration\n\n// permission judge function\nfunction hasPermission(roles, permissionRoles) {\n  if (roles.indexOf('admin') >= 0) return true // admin permission passed directly\n  if (!permissionRoles) return true\n  return roles.some(role => permissionRoles.indexOf(role) >= 0)\n}\n\nconst whiteList = ['/login', '/authredirect']// no redirect whitelist\n\nrouter.beforeEach((to, from, next) => {\n  NProgress.start() // start progress bar\n  if (getToken()) { // determine if there has token\n    /* has token*/\n    if (to.path === '/login') {\n      next({ path: '/' })\n      NProgress.done() // if current page is dashboard will not trigger\tafterEach hook, so manually handle it\n    } else {\n      if (store.getters.roles.length === 0) { // 判断当前用户是否已拉取完user_info信息\n        store.dispatch('GetUserInfo').then(res => { // 拉取user_info\n          const roles = res.data.roles // note: roles must be a array! such as: ['editor','develop']\n          store.dispatch('GenerateRoutes', { roles }).then(() => { // 根据roles权限生成可访问的路由表\n            router.addRoutes(store.getters.addRouters) // 动态添加可访问路由表\n            next({ ...to, replace: true }) // hack方法 确保addRoutes已完成 ,set the replace: true so the navigation will not leave a history record\n          })\n        }).catch((err) => {\n          store.dispatch('FedLogOut').then(() => {\n            Message.error(err || 'Verification failed, please login again')\n            next({ path: '/' })\n          })\n        })\n      } else {\n        // 没有动态改变权限的需求可直接next() 删除下方权限判断 ↓\n        if (hasPermission(store.getters.roles, to.meta.roles)) {\n          next()//\n        } else {\n          next({ path: '/401', replace: true, query: { noGoBack: true }})\n        }\n        // 可删 ↑\n      }\n    }\n  } else {\n    /* has no token*/\n    if (whiteList.indexOf(to.path) !== -1) { // 在免登录白名单，直接进入\n      next()\n    } else {\n      next('/login') // 否则全部重定向到登录页\n      NProgress.done() // if current page is login will not trigger afterEach hook, so manually handle it\n    }\n  }\n})\n\nrouter.afterEach(() => {\n  NProgress.done() // finish progress bar\n})\n复制代码\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("if (store.getters.roles.length === 0) { // 判断当前用户是否已拉取完user_info信息\n        store.dispatch('GetUserInfo').then(res => { // 拉取user_info\n          const roles = res.data.roles // note: roles must be a array! such as: ['editor','develop']\n          store.dispatch('GenerateRoutes', { roles }).then(() => { // 根据roles权限生成可访问的路由表\n            router.addRoutes(store.getters.addRouters) // 动态添加可访问路由表\n            next({ ...to, replace: true }) // hack方法 确保addRoutes已完成 ,set the replace: true so the navigation will not leave a history record\n          })\n        }).catch((err) => {\n          store.dispatch('FedLogOut').then(() => {\n            Message.error(err || 'Verification failed, please login again')\n            next({ path: '/' })\n          })\n        })\n复制代码\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"缺点-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点-3","aria-hidden":"true"}},[this._v("#")]),this._v(" 缺点")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("全局路由守卫里，每次路由跳转都要做判断")]),t("li",[this._v("菜单信息写死在前端，要改个显示文字或权限信息，需要重新编译")]),t("li",[this._v("菜单跟路由耦合在一起，定义路由的时候还有添加菜单显示标题，图标之类的信息，而且路由不一定作为菜单显示，还要多加字段进行标识")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"菜单与路由分离，菜单由后端返回"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#菜单与路由分离，菜单由后端返回","aria-hidden":"true"}},[this._v("#")]),this._v(" 菜单与路由分离，菜单由后端返回")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"实现-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现-4","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('{\n    name: "login",\n    path: "/login",\n    component: () => import("@/pages/Login.vue")\n}\n复制代码\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/7/28/164dfe8dcf86273a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("function hasPermission(router, accessMenu) {\n  if (whiteList.indexOf(router.path) !== -1) {\n    return true;\n  }\n  let menu = Util.getMenuByName(router.name, accessMenu);\n  if (menu.name) {\n    return true;\n  }\n  return false;\n\n}\n\nRouter.beforeEach(async (to, from, next) => {\n  if (getToken()) {\n    let userInfo = store.state.user.userInfo;\n    if (!userInfo.name) {\n      try {\n        await store.dispatch(\"GetUserInfo\")\n        await store.dispatch('updateAccessMenu')\n        if (to.path === '/login') {\n          next({ name: 'home_index' })\n        } else {\n          //Util.toDefaultPage([...routers], to.name, router, next);\n          next({ ...to, replace: true })//菜单权限更新完成,重新进一次当前路由\n        }\n      }  \n      catch (e) {\n        if (whiteList.indexOf(to.path) !== -1) { // 在免登录白名单，直接进入\n          next()\n        } else {\n          next('/login')\n        }\n      }\n    } else {\n      if (to.path === '/login') {\n        next({ name: 'home_index' })\n      } else {\n        if (hasPermission(to, store.getters.accessMenu)) {\n          Util.toDefaultPage(store.getters.accessMenu,to, routes, next);\n        } else {\n          next({ path: '/403',replace:true })\n        }\n      }\n    }\n  } else {\n    if (whiteList.indexOf(to.path) !== -1) { // 在免登录白名单，直接进入\n      next()\n    } else {\n      next('/login')\n    }\n  }\n  let menu = Util.getMenuByName(to.name, store.getters.accessMenu);\n  Util.title(menu.title);\n});\n\nRouter.afterEach((to) => {\n  window.scrollTo(0, 0);\n});\n\n复制代码\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("如果路由很多，可以在应用初始化的时候，只挂载不需要权限控制的路由。取得后端返回的菜单后，根据菜单与路由的对应关系，筛选出可访问的路由，通过"),t("code",[this._v("addRoutes")]),this._v("动态挂载。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"缺点-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点-4","aria-hidden":"true"}},[this._v("#")]),this._v(" 缺点")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("菜单需要与路由做一一对应，前端添加了新功能，需要通过菜单管理功能添加新的菜单，如果菜单配置的不对会导致应用不能正常使用")]),t("li",[this._v("全局路由守卫里，每次路由跳转都要做判断")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"菜单与路由完全由后端返回"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#菜单与路由完全由后端返回","aria-hidden":"true"}},[this._v("#")]),this._v(" 菜单与路由完全由后端返回")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('{\n    name: "login",\n    path: "/login",\n    component: () => import("@/pages/Login.vue")\n}\n复制代码\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('{\n    "name": "login",\n    "path": "/login",\n    "component": "() => import(\'@/pages/Login.vue\')"\n}\n复制代码\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这是什么鬼，明显不行。"),t("code",[this._v("() => import('@/pages/Login.vue')")]),this._v("这代码如果没出现在前端，webpack不会对"),t("code",[this._v("Login.vue")]),this._v("进行编译打包")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"实现-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现-5","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('const Home = () => import("../pages/Home.vue");\nconst UserInfo = () => import("../pages/UserInfo.vue");\nexport default {\n  home: Home,\n  userInfo: UserInfo\n};\n复制代码\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('[\n      {\n        name: "home",\n        path: "/",\n        component: "home"\n      },\n      {\n        name: "home",\n        path: "/userinfo",\n        component: "userInfo"\n      }\n]\n复制代码\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在将后端返回路由通过"),t("code",[this._v("addRoutes")]),this._v("动态挂载之间，需要将数据处理一下，将component字段换为真正的组件。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"缺点-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点-5","aria-hidden":"true"}},[this._v("#")]),this._v(" 缺点")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("全局路由守卫里，每次路由跳转都要做判断")]),t("li",[this._v("前后端的配合要求更高")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"不使用全局路由守卫"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不使用全局路由守卫","aria-hidden":"true"}},[this._v("#")]),this._v(" 不使用全局路由守卫")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("前面几种方式，除了"),t("code",[this._v("登录页与主应用分离")]),this._v(",每次路由跳转，都在全局路由守卫里做了判断。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"实现-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现-6","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('const constRouterMap = [\n  {\n    name: "login",\n    path: "/login",\n    component: () => import("@/pages/Login.vue")\n  },\n  {\n    path: "/404",\n    component: () => import("@/pages/Page404.vue")\n  },\n  {\n    path: "/init",\n    component: () => import("@/pages/Init.vue")\n  },\n  {\n    path: "*",\n    redirect: "/404"\n  }\n];\nexport default constRouterMap;\n复制代码\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('import Vue from "vue";\nimport Router from "vue-router";\nimport ConstantRouterMap from "./routers";\n\nVue.use(Router);\n\nexport default new Router({\n  // mode: \'history\', // require service support\n  scrollBehavior: () => ({ y: 0 }),\n  routes: ConstantRouterMap\n});\n复制代码\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("登录成功后跳到"),t("code",[this._v("/")]),this._v("路由")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("submitForm(formName) {\n      let _this=this;\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          _this.$store.dispatch(\"loginByUserName\",{\n            name:_this.ruleForm2.name,\n            pass:_this.ruleForm2.pass\n          }).then(()=>{\n            _this.$router.push({\n              path:'/'\n            })\n          })\n        } else {\n          \n          return false;\n        }\n      });\n    }\n复制代码\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("因为当前没有"),t("code",[this._v("/")]),this._v("路由，会跳到"),t("code",[this._v("/404")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<template>\n  <h1>404</h1>\n</template>\n<script>\nexport default {\n  name:'page404',\n  mounted(){\n    if(!this.$store.state.isLogin){\n      this.$router.replace({ path: '/login' });\n      return;\n    }\n    if(!this.$store.state.initedApp){\n       this.$router.replace({ path: '/init' });\n       return\n    }\n  }\n}\n<\/script>\n复制代码\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("404组件里判断已经登录，接着判断应用是否已经初始化(用户权限信息，可访问菜单，路由等是否已经从后端取得)。没有初始化则跳转到"),t("code",[this._v("/init")]),this._v("路由")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<template>\n  <div></div>\n</template>\n<script>\nimport { getAccessMenuList } from "../mock/menus";\nimport components from "../router/routerComponents.js";\nexport default {\n  async mounted() {\n    if (!this.$store.state.isLogin) {\n      this.$router.push({ path: "/login" });\n      return;\n    }\n    if (!this.$store.state.initedApp) {\n      const loading = this.$loading({\n        lock: true,\n        text: "初始化中",\n        spinner: "el-icon-loading",\n        background: "rgba(0, 0, 0, 0.7)"\n      });\n      let menus = await getAccessMenuList(); //模拟从后端获取\n      var routers = [...menus];\n      for (let router of routers) {\n        let component = components[router.component];\n        router.component = component;\n      }\n      this.$router.addRoutes(routers);\n      this.$store.dispatch("setAccessMenuList", menus).then(() => {\n        loading.close();\n        this.$router.replace({\n          path: "/"\n        });\n      });\n      return;\n    } else {\n      this.$router.replace({\n        path: "/"\n      });\n    }\n  }\n};\n<\/script>\n\n复制代码\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("如果已经初始化，跳转"),t("code",[this._v("/")]),this._v("路由(如果后端返回的路由里没有定义次路由，则会跳转404)。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("没有初始化，则调用远程接口获取菜单和路由等，然后处理后端返回的路由，将component赋值为真正 的组件，接着调用"),t("code",[this._v("addRoutes")]),this._v("挂载新路由，最后跳转"),t("code",[this._v("/")]),this._v("路由即可。菜单的处理也是在此处，看实际 需求。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"缺点-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点-6","aria-hidden":"true"}},[this._v("#")]),this._v(" 缺点")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("在404页面做了判断，感觉比较怪异")]),t("li",[this._v("多引入了一个init页面组件")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结")])}],!1,null,null,null);t.default=r.exports}}]);