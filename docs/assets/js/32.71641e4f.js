(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{178:function(t,e,n){"use strict";n.r(e);var s=n(0),r=Object(s.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[t._m(0),n("p",[t._v("简历不是一份记流水账的东西，而是让用人方了解你的亮点的。")]),n("p",[t._v("平时有在做一些修改简历的收费服务，也算看过蛮多简历了。很多简历都有如下特征")]),t._m(1),n("p",[t._v("以上类似简历可以说用人方也看了无数份，完全抓不到你的亮点。除非你呆过大厂或者教育背景不错或者技术栈符合人家要求了，否则基本就是看运气约面试了。")]),n("p",[t._v("以下是我经常给别人修改简历的意见：")]),n("p",[t._v("简历页数控制在 2 页以下")]),t._m(2),n("p",[t._v("做到以上内容，然后在投递简历的过程中加上一份求职信，对你的求职之路相信能帮上很多忙。")]),t._m(3),t._m(4),n("p",[t._v("当执行 JS 代码时，会生成执行环境，只要代码不是写在函数中的，就是在全局执行环境中，函数中的代码会产生函数执行环境，只此两种执行环境。")]),t._m(5),t._m(6),n("p",[t._v("想必以上的输出大家肯定都已经明白了，这是因为函数和变量提升的原因。通常提升的解释是说将声明的代码移动到了顶部，这其实没有什么错误，便于大家理解。但是更准确的解释应该是：在生成执行环境时，会有两个阶段。第一个阶段是创建的阶段，JS 解释器会找出需要提升的变量和函数，并且给他们提前在内存中开辟好空间，函数的话会将整个函数存入内存中，变量只声明并且赋值为 undefined，所以在第二个阶段，也就是代码执行阶段，我们可以直接提前使用。")]),n("p",[t._v("在提升的过程中，相同的函数会覆盖上一个函数，并且函数优先于变量提升")]),t._m(7),t._m(8),t._m(9),n("p",[t._v("首先说下前两者的区别。")]),t._m(10),t._m(11),t._m(12),t._m(13),t._m(14),n("p",[t._v("对于实现以下几个函数，可以从几个方面思考")]),t._m(15),t._m(16),t._m(17),t._m(18),t._m(19),t._m(20),t._m(21),t._m(22),t._m(23),t._m(24),t._m(25),n("p",[t._v("如果你想更进一步的了解原型，可以仔细阅读 "),n("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FKieSun%2FBlog%2Fissues%2F2",target:"_blank",rel:"noopener noreferrer"}},[t._v("深度解析原型中的各个难点"),n("OutboundLink")],1),t._v("。")]),t._m(26),t._m(27),t._m(28),t._m(29),t._m(30),t._m(31),t._m(32),t._m(33),t._m(34),t._m(35),t._m(36),t._m(37),n("p",[t._v("对于以上代码你可能会有疑惑，这里说明下原理")]),t._m(38),t._m(39),n("p",[t._v("Generator 是 ES6 中新增的语法，和 Promise 一样，都可以用来异步编程")]),t._m(40),t._m(41),t._m(42),t._m(43),n("p",[t._v("Promise 是 ES6 新增的语法，解决了回调地狱的问题。")]),t._m(44),t._m(45),t._m(46),t._m(47),t._m(48),t._m(49),n("p",[t._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"800",height:"600"}}),t._v(")")]),t._m(50),t._m(51),t._m(52),t._m(53),t._m(54),n("p",[t._v("V8 实现了准确式 GC，GC 算法采用了分代式垃圾回收机制。因此，V8 将内存（堆）分为新生代和老生代两部分。")]),t._m(55),n("p",[t._v("新生代中的对象一般存活时间较短，使用 Scavenge GC 算法。")]),n("p",[t._v("在新生代空间中，内存空间分为两部分，分别为 From 空间和 To 空间。在这两个空间中，必定有一个空间是使用的，另一个空间是空闲的。新分配的对象会被放入 From 空间中，当 From 空间被占满时，新生代 GC 就会启动了。算法会检查 From 空间中存活的对象并复制到 To 空间中，如果有失活的对象就会销毁。当复制完成后将 From 空间和 To 空间互换，这样 GC 就结束了。")]),t._m(56),n("p",[t._v("老生代中的对象一般存活时间较长且数量也多，使用了两个算法，分别是标记清除算法和标记压缩算法。")]),n("p",[t._v("在讲算法前，先来说下什么情况下对象会出现在老生代空间中：")]),t._m(57),n("p",[t._v("老生代中的空间很复杂，有如下几个空间")]),t._m(58),n("p",[t._v("在老生代中，以下情况会先启动标记清除算法：")]),t._m(59),n("p",[t._v("在这个阶段中，会遍历堆中所有的对象，然后标记活的对象，在标记完成后，销毁所有没有被标记的对象。在标记大型对内存时，可能需要几百毫秒才能完成一次标记。这就会导致一些性能上的问题。为了解决这个问题，2011 年，V8 从 stop-the-world 标记切换到增量标志。在增量标记期间，GC 将标记工作分解为更小的模块，可以让 JS 应用逻辑在模块间隙执行一会，从而不至于让应用出现停顿情况。但在 2018 年，GC 技术又有了一个重大突破，这项技术名为并发标记。该技术可以让 GC 扫描和标记对象时，同时允许 JS 运行，你可以点击 "),n("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fv8project.blogspot.com%2F2018%2F06%2Fconcurrent-marking.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("该博客"),n("OutboundLink")],1),t._v(" 详细阅读。")]),n("p",[t._v("清除对象后会造成堆内存出现碎片的情况，当碎片超过一定限制后会启动压缩算法。在压缩过程中，将活的对象像一端移动，直到所有对象都移动完成然后清理掉不需要的内存。")]),t._m(60),n("p",[t._v("闭包的定义很简单：函数 A 返回了一个函数 B，并且函数 B 中使用了函数 A 的变量，函数 B 就被称为闭包。")]),t._m(61),n("p",[t._v("你是否会疑惑，为什么函数 A 已经弹出调用栈了，为什么函数 B 还能引用到函数 A 中的变量。因为函数 A 中的变量这时候是存储在堆上的。现在的 JS 引擎可以通过逃逸分析辨别出哪些变量需要存储在堆上，哪些需要存储在栈上。")]),t._m(62),t._m(63),t._m(64),n("p",[t._v("解决办法两种，第一种使用闭包")]),t._m(65),t._m(66),t._m(67),t._m(68),t._m(69),t._m(70),t._m(71),t._m(72),n("p",[t._v("前者存储在栈上，后者存储在堆上")]),t._m(73),n("p",[t._v("众所周知 JS 是门非阻塞单线程语言，因为在最初 JS 就是为了和浏览器交互而诞生的。如果 JS 是门多线程的语言话，我们在多个线程中处理 DOM 就可能会发生问题（一个线程中新加节点，另一个线程中删除节点），当然可以引入读写锁解决这个问题。")]),n("p",[t._v("JS 在执行的过程中会产生执行环境，这些执行环境会被顺序的加入到执行栈中。如果遇到异步的代码，会被挂起并加入到 Task（有多种 task） 队列中。一旦执行栈为空，Event Loop 就会从 Task 队列中拿出需要执行的代码并放入执行栈中执行，所以本质上来说 JS 中的异步还是同步行为。")]),t._m(74),t._m(75),t._m(76),t._m(77),t._m(78),t._m(79),t._m(80),t._m(81),n("p",[t._v("所以正确的一次 Event loop 顺序是这样的")]),t._m(82),n("p",[t._v("通过上述的  Event loop 顺序可知，如果宏任务中的异步代码有大量的计算并且需要操作 DOM 的话，为了更快的 界面响应，我们可以把操作 DOM 放入微任务中。")]),t._m(83),n("p",[t._v("Node 中的 Event loop 和浏览器中的不相同。")]),n("p",[t._v("Node 的 Event loop 分为6个阶段，它们会按照顺序反复运行")]),t._m(84),t._m(85),t._m(86),t._m(87),t._m(88),n("p",[t._v("**I/O **")]),t._m(89),t._m(90),n("p",[t._v("idle, prepare 阶段内部实现")]),t._m(91),n("p",[t._v("poll 阶段很重要，这一阶段中，系统会做两件事情")]),t._m(92),n("p",[t._v("并且当 poll 中没有定时器的情况下，会发现以下两件事情")]),t._m(93),n("p",[t._v("如果有别的定时器需要被执行，会回到 timer 阶段执行回调。")]),t._m(94),t._m(95),t._m(96),n("p",[t._v("close callbacks 阶段执行 close 事件")]),n("p",[t._v("并且在 Node 中，有些情况下的定时器执行顺序是随机的")]),t._m(97),n("p",[t._v("当然在这种情况下，执行顺序是相同的")]),t._m(98),n("p",[t._v("上面介绍的都是 macrotask 的执行情况，microtask 会在以上每个阶段完成后立即执行。")]),t._m(99),t._m(100),t._m(101),t._m(102),t._m(103),n("p",[t._v("以下是一个相对准备的倒计时实现")]),t._m(104),t._m(105),n("p",[t._v("你是否在日常开发中遇到一个问题，在滚动事件中需要做个复杂计算或者实现一个按钮的防二次点击操作。")]),n("p",[t._v("这些需求都可以通过函数防抖动来实现。尤其是第一个需求，如果在频繁的事件回调中做复杂计算，很有可能导致页面卡顿，不如将多次计算合并为一次计算，只在一个精确点做操作。")]),n("p",[t._v("PS：防抖和节流的作用都是防止函数多次调用。区别在于，假设一个用户一直触发这个函数，且每次触发函数的间隔小于wait，防抖的情况下只会调用一次，而节流的 情况会每隔一定时间（参数wait）调用函数。")]),n("p",[t._v("我们先来看一个袖珍版的防抖理解一下防抖的实现：")]),t._m(106),n("p",[t._v("这是一个简单版的防抖，但是有缺陷，这个防抖只能在最后调用。一般的防抖会有immediate选项，表示是否立即调用。这两者的区别，举个栗子来说：")]),t._m(107),n("p",[t._v("下面我们来实现一个带有立即执行选项的防抖函数")]),t._m(108),n("p",[t._v("整体函数实现的不难，总结一下。")]),t._m(109),t._m(110),t._m(111),n("p",[t._v("如果想将一个多维数组彻底的降维，可以这样实现")]),t._m(112),t._m(113),t._m(114),t._m(115),n("p",[t._v("但是该方法也是有局限性的：")]),t._m(116),t._m(117),n("p",[t._v("如果你有这么一个循环引用对象，你会发现你不能通过该方法深拷贝")]),n("p",[t._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"840",height:"100"}}),t._v(")")]),t._m(118),t._m(119),t._m(120),n("p",[t._v("但是在通常情况下，复杂数据都是可以序列化的，所以这个函数可以解决大部分问题，并且该函数是内置函数中处理深拷贝性能最快的。当然如果你的数据中含有以上三种情况下，可以使用 "),n("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Flodash.com%2Fdocs%23cloneDeep",target:"_blank",rel:"noopener noreferrer"}},[t._v("lodash 的深拷贝函数"),n("OutboundLink")],1),t._v("。")]),t._m(121),t._m(122),t._m(123),t._m(124),t._m(125),t._m(126),t._m(127),t._m(128),t._m(129),t._m(130),t._m(131),t._m(132),t._m(133),t._m(134),t._m(135),t._m(136),t._m(137),t._m(138),n("p",[t._v("Load 事件触发代表页面中的 DOM，CSS，JS，图片已经全部加载完毕。")]),n("p",[t._v("DOMContentLoaded 事件触发代表初始的 HTML 被完全加载和解析，不需要等待 CSS，JS，图片加载。")]),t._m(139),n("p",[t._v("因为浏览器出于安全考虑，有同源策略。也就是说，如果协议、域名或者端口有一个不同就是跨域，Ajax 请求会失败。")]),n("p",[t._v("我们可以通过以下几种常用方法解决跨域的问题")]),t._m(140),t._m(141),t._m(142),t._m(143),n("p",[t._v("在开发中可能会遇到多个 JSONP 请求的回调函数名是相同的，这时候就需要自己封装一个 JSONP，以下是简单实现")]),t._m(144),t._m(145),t._m(146),n("p",[t._v("浏览器会自动进行 CORS 通信，实现CORS通信的关键是后端。只要后端实现了 CORS，就实现了跨域。")]),t._m(147),t._m(148),t._m(149),t._m(150),t._m(151),n("p",[t._v("这种方式通常用于获取嵌入页面中的第三方页面数据。一个页面发送消息，另一个页面判断来源并接收消息")]),t._m(152),t._m(153),n("p",[t._v("如果一个节点中的子节点是动态生成的，那么子节点需要注册事件的话应该注册在父节点上")]),t._m(154),n("p",[t._v("事件代理的方式相对于直接给目标注册事件来说，有以下优点")]),t._m(155),t._m(156),t._m(157),n("p",[t._v("目前该技术通常用来做缓存文件，提高首屏速度，可以试着来实现这个功能。")]),t._m(158),t._m(159),n("p",[t._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"1280",height:"522"}}),t._v(")")]),t._m(160),n("p",[t._v("缓存对于前端性能优化来说是个很重要的点，良好的缓存策略可以降低资源的重复加载提高网页的整体加载速度。")]),n("p",[t._v("通常浏览器缓存策略分为两种：强缓存和协商缓存。")]),t._m(161),t._m(162),t._m(163),t._m(164),t._m(165),t._m(166),t._m(167),n("p",[t._v("如果缓存过期了，我们就可以使用协商缓存来解决问题。协商缓存需要请求，如果缓存有效会返回 304。")]),n("p",[t._v("协商缓存需要客户端和服务端共同实现，和强缓存一样，也有两种实现方式。")]),t._m(168),t._m(169),t._m(170),t._m(171),t._m(172),t._m(173),n("p",[t._v("对于大部分的场景都可以使用强缓存配合协商缓存解决，但是在一些特殊的地方可能需要选择特殊的缓存策略")]),t._m(174),t._m(175),t._m(176),n("p",[t._v("重绘和回流是渲染步骤中的一小节，但是这两个步骤对于性能影响很大。")]),t._m(177),n("p",[t._v("回流必定会发生重绘，重绘不一定会引发回流。回流所需的成本比重绘高的多，改变深层次的节点很可能导致父节点的一系列回流。")]),n("p",[t._v("所以以下几个动作可能会导致性能问题：")]),t._m(178),n("p",[t._v("很多人不知道的是，重绘和回流其实和 Event loop 有关。")]),t._m(179),n("p",[t._v("以上内容来自于 "),n("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fhtml.spec.whatwg.org%2Fmultipage%2Fwebappapis.html%23event-loop-processing-model",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTML 文档"),n("OutboundLink")],1)]),t._m(180),n("ul",[t._m(181),t._m(182),t._m(183),t._m(184),t._m(185),t._m(186),t._m(187),n("li",[t._m(188),n("p",[t._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"1280",height:"619"}}),t._v(")")])])]),t._m(189),t._m(190),n("p",[t._v("对于一张 100 * 100 像素的图片来说，图像上有 10000 个像素点，如果每个像素的值是 RGBA 存储的话，那么也就是说每个像素有 4 个通道，每个通道 1 个字节（8 位 = 1个字节），所以该图片大小大概为 39KB（10000 * 1 * 4 / 1024）。")]),n("p",[t._v("但是在实际项目中，一张图片可能并不需要使用那么多颜色去显示，我们可以通过减少每个像素的调色板来相应缩小图片的大小。")]),n("p",[t._v("了解了如何计算图片大小的知识，那么对于如何优化图片，想必大家已经有 2 个思路了：")]),t._m(191),t._m(192),t._m(193),t._m(194),t._m(195),t._m(196),n("p",[t._v("静态资源尽量使用 CDN 加载，由于浏览器对于单个域名有并发请求上限，可以考虑使用多个 CDN 域名。对于 CDN 加载静态资源需要注意 CDN 域名要与主站不同，否则每次请求都会带上主站的 Cookie。")]),t._m(197),t._m(198),t._m(199),t._m(200),t._m(201),t._m(202),n("p",[t._v("本质就是编译器，当代码转为字符串生成 AST，对 AST 进行转变最后再生成新的代码")]),t._m(203),t._m(204),t._m(205),n("p",[t._v("比如你想实现一个编译结束退出命令的插件")]),t._m(206),t._m(207),t._m(208),n("p",[t._v("在 V16 版本中引入了 Fiber 机制。这个机制一定程度上的影响了部分生命周期的调用，并且也引入了新的 2 个 API 来解决问题。")]),t._m(209),n("p",[t._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"685",height:"739"}}),t._v(")")]),n("p",[t._v("调用栈过长，再加上中间进行了复杂的操作，就可能导致长时间阻塞主线程，带来不好的用户体验。Fiber 就是为了解决该问题而生。")]),n("p",[t._v("Fiber 本质上是一个虚拟的堆栈帧，新的调度器会按照优先级自由调度这些帧，从而将之前的同步渲染改成了异步渲染，在不影响体验的情况下去分段计算更新。")]),n("p",[t._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"1119",height:"600"}}),t._v(")")]),n("p",[t._v("对于如何区别优先级，React 有自己的一套逻辑。对于动画这种实时性很高的东西，也就是 16 ms 必须渲染一次保证不卡顿的情况下，React 会每 16 ms（以内） 暂停一下更新，返回来继续渲染动画。")]),t._m(210),t._m(211),t._m(212),t._m(213),t._m(214),t._m(215),t._m(216),t._m(217),t._m(218),t._m(219),t._m(220),t._m(221),t._m(222),t._m(223),t._m(224),t._m(225),t._m(226),t._m(227),t._m(228),t._m(229),t._m(230),t._m(231),t._m(232),t._m(233),n("p",[t._v("在 Vue 2.4 之前都是使用的 microtasks，但是 microtasks 的优先级过高，在某些情况下可能会出现比事件冒泡更快的情况，但如果都使用 macrotasks 又可能会出现渲染的性能问题。所以在新版本中，会默认使用 microtasks，但在特殊情况下会使用 macrotasks，比如 v-on。")]),t._m(234),t._m(235),t._m(236),t._m(237),t._m(238),n("p",[t._v("生命周期函数就是组件在初始化或者数据更新时会触发的钩子函数。")]),n("p",[t._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"505",height:"1280"}}),t._v(")")]),t._m(239),t._m(240),t._m(241),n("p",[t._v("接下来会执行挂载函数")]),t._m(242),t._m(243),n("p",[t._v("接下来是数据更新时会调用的钩子函数")]),t._m(244),t._m(245),n("p",[t._v("最后就是销毁组件的钩子函数了")]),t._m(246),t._m(247),t._m(248),t._m(249),t._m(250),t._m(251),t._m(252),t._m(253),t._m(254),t._m(255),t._m(256),n("p",[t._v("前端路由实现起来其实很简单，本质就是监听 URL 的变化，然后匹配路由规则，显示相应的页面，并且无须刷新。目前单页面使用的路由就只有两种实现方式")]),t._m(257),t._m(258),t._m(259),n("p",[t._v("History 模式是 HTML5 新推出的功能，比之 Hash URL 更加美观")]),t._m(260),t._m(261),n("p",[t._v("MVVM 由以下三个内容组成")]),t._m(262),n("p",[t._v("在 JQuery 时期，如果需要刷新 UI 时，需要先取到对应的 DOM 再更新 UI，这样数据和业务的逻辑就和页面有强耦合。")]),n("p",[t._v("在 MVVM 中，UI 是通过数据驱动的，数据一旦改变就会相应的刷新对应的 UI，UI 如果改变，也会改变对应的数据。这种方式就可以在业务处理中只关心数据的流转，而无需直接和页面打交道。ViewModel 只关心数据和业务的处理，不关心 View 如何处理数据，在这种情况下，View 和 Model 都可以独立出来，任何一方改变了也不一定需要改变另一方，并且可以将一些可复用的逻辑放在一个 ViewModel 中，让多个 View 复用这个 ViewModel。")]),n("p",[t._v("在 MVVM 中，最核心的也就是数据双向绑定，例如 Angluar 的脏数据检测，Vue 中的数据劫持。")]),t._m(263),t._m(264),n("p",[t._v("脏数据检测虽然存在低效的问题，但是不关心数据是通过什么方式改变的，都可以完成任务，但是这在 Vue 中的双向绑定是存在问题的。并且脏数据检测可以实现批量检测出更新的值，再去统一更新 UI，大大减少了操作 DOM 的次数。所以低效也是相对的，这就仁者见仁智者见智了。")]),t._m(265),t._m(266),t._m(267),t._m(268),t._m(269),n("p",[t._v("在解析如上模板代码时，遇到 "),n("code",[t._v(t._s(t.name))]),t._v(" 就会给属性 "),n("code",[t._v("name")]),t._v(" 添加发布订阅。")]),t._m(270),t._m(271),t._m(272),n("p",[t._v("以上实现了一个简易的双向绑定，核心思路就是手动触发一次属性的 getter 来实现发布订阅的添加。")]),t._m(273),t._m(274),t._m(275),n("p",[t._v("虽然 Vue 中确实能检测到数组数据的变化，但是其实是使用了 hack 的办法，并且也是有缺陷的。")]),t._m(276),n("p",[t._v("反观 Proxy 就没以上的问题，原生支持监听数组变化，并且可以直接对整个对象进行拦截，所以 Vue 也将在下个大版本中使用 Proxy 替换 Object.defineProperty")]),t._m(277),t._m(278),n("p",[t._v("虚拟 DOM 涉及的内容很多，具体可以参考我之前 "),n("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fjuejin.im%2Fpost%2F5b10dd36e51d4506e04cf802",target:"_blank",rel:"noopener noreferrer"}},[t._v("写的文章"),n("OutboundLink")],1)]),t._m(279),t._m(280),t._m(281),t._m(282),t._m(283),t._m(284),n("p",[t._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"666",height:"426"}}),t._v(")")]),n("p",[t._v("在 TCP 协议中，主动发起请求的一端为客户端，被动连接的一端称为服务端。不管是客户端还是服务端，TCP 连接建立完后都能发送和接收数据，所以 TCP 也是一个全双工的协议。")]),n("p",[t._v("起初，两端都为 CLOSED 状态。在通信开始前，双方都会创建 TCB。 服务器创建完 TCB 后遍进入 LISTEN 状态，此时开始等待客户端发送数据。")]),t._m(285),t._m(286),t._m(287),n("p",[t._v("服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。")]),t._m(288),n("p",[t._v("当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。")]),n("p",[t._v("PS：第三次握手可以包含数据，通过 TCP 快速打开（TFO）技术。其实只要涉及到握手的协议，都可以使用类似 TFO 的方式，客户端和服务端存储相同 cookie，下次握手时发出 cookie 达到减少 RTT 的目的。")]),t._m(289),n("p",[t._v("因为这是为了防止失效的连接请求报文段被服务端接收，从而产生错误。")]),n("p",[t._v("可以想象如下场景。客户端发送了一个连接请求 A，但是因为网络原因造成了超时，这时 TCP 会启动超时重传的机制再次发送一个连接请求 B。此时请求顺利到达服务端，服务端应答完就建立了请求。如果连接请求 A 在两端关闭后终于抵达了服务端，那么这时服务端会认为客户端又需要建立 TCP 连接，从而应答了该请求并进入 ESTABLISHED 状态。此时客户端其实是 CLOSED 状态，那么就会导致服务端一直等待，造成资源的浪费。")]),n("p",[t._v("PS：在建立连接中，任意一端掉线，TCP 都会重发 SYN 包，一般会重试五次，在建立连接中可能会遇到 SYN FLOOD 攻击。遇到这种情况你可以选择调低重试次数或者干脆在不能处理的情况下拒绝请求。")]),t._m(290),n("p",[t._v("拥塞处理和流量控制不同，后者是作用于接收方，保证接收方来得及接受数据。而前者是作用于网络，防止过多的数据拥塞网络，避免出现网络负载过大的情况。")]),n("p",[t._v("拥塞处理包括了四个算法，分别为：慢开始，拥塞避免，快速重传，快速恢复。")]),t._m(291),n("p",[t._v("慢开始算法，顾名思义，就是在传输开始时将发送窗口慢慢指数级扩大，从而避免一开始就传输大量数据导致网络拥塞。")]),n("p",[t._v("慢开始算法步骤具体如下")]),t._m(292),t._m(293),n("p",[t._v("拥塞避免算法相比简单点，每过一个 RTT 窗口大小只加一，这样能够避免指数级增长导致网络拥塞，慢慢将大小调整到最佳值。")]),n("p",[t._v("在传输过程中可能定时器超时的情况，这时候 TCP 会认为网络拥塞了，会马上进行以下步骤：")]),t._m(294),t._m(295),n("p",[t._v("快速重传一般和快恢复一起出现。一旦接收端收到的报文出现失序的情况，接收端只会回复最后一个顺序正确的报文序号（没有 Sack 的情况下）。如果收到三个重复的 ACK，无需等待定时器超时再重发而是启动快速重传。具体算法分为两种：")]),t._m(296),t._m(297),t._m(298),t._m(299),t._m(300),t._m(301),t._m(302),n("p",[t._v("假如我有一个分段数据是 1 ~ 10 这十个序号的报文，其中丢失了序号为 3 和 7 的报文，那么该分段的最大序号就是 10。发送端只会收到 ACK 序号为 3 的应答。这时候重发序号为 3 的报文，接收方顺利接收并会发送 ACK 序号为 7 的应答。这时候 TCP 知道对端是有多个包未收到，会继续发送序号为 7 的报文，接收方顺利接收并会发送 ACK 序号为 11 的应答，这时发送端认为这个分段接收端已经顺利接收，接下来会退出快恢复阶段。")]),t._m(303),n("p",[t._v("HTTPS 还是通过了 HTTP 来传输信息，但是信息通过 TLS 协议进行了加密。")]),t._m(304),n("p",[t._v("TLS 协议位于传输层之上，应用层之下。首次进行 TLS 协议传输需要两个 RTT ，接下来可以通过 Session Resumption 减少到一个 RTT。")]),n("p",[t._v("在 TLS 中使用了两种加密技术，分别为：对称加密和非对称加密。")]),t._m(305),n("p",[t._v("对称加密就是两边拥有相同的秘钥，两边都知道如何将密文加密解密。")]),t._m(306),n("p",[t._v("有公钥私钥之分，公钥所有人都可以知道，可以将数据用公钥加密，但是将数据解密必须使用私钥解密，私钥只有分发公钥的一方才知道。")]),t._m(307),n("p",[t._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"1280",height:"826"}}),t._v(")")]),t._m(308),n("p",[t._v("通过以上步骤可知，在 TLS 握手阶段，两端使用非对称加密的方式来通信，但是因为非对称加密损耗的性能比对称加密大，所以在正式传输数据时，两端使用对称加密的方式通信。")]),n("p",[t._v("PS：以上说明的都是 TLS 1.2 协议的握手情况，在 1.3 协议中，首次建立连接只需要一个 RTT，后面恢复连接不需要 RTT 了。")]),t._m(309),t._m(310),t._m(311),t._m(312),t._m(313),t._m(314),t._m(315),t._m(316),t._m(317),t._m(318),t._m(319),t._m(320),t._m(321),n("p",[t._v("以下两个函数是排序中会用到的通用函数，就不一一写了")]),t._m(322),t._m(323),t._m(324),n("p",[t._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"670",height:"508"}}),t._v(")")]),n("p",[t._v("以下是实现该算法的代码")]),t._m(325),t._m(326),t._m(327),n("p",[t._v("插入排序的原理如下。第一个元素默认是已排序元素，取出下一个元素和当前元素比较，如果当前元素大就交换位置。那么此时第一个元素就是当前的最小数，所以下次取出操作从第三个元素开始，向前对比，重复之前的操作。")]),n("p",[t._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"670",height:"508"}}),t._v(")")]),n("p",[t._v("以下是实现该算法的代码")]),t._m(328),t._m(329),t._m(330),n("p",[t._v("选择排序的原理如下。遍历数组，设置最小值的索引为 0，如果取出的值比当前最小值小，就替换最小值索引，遍历完成后，将第一个元素和最小值索引上的值交换。如上操作后，第一个元素就是数组中的最小值，下次遍历就可以从索引 1 开始重复上述操作。")]),n("p",[t._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"670",height:"508"}}),t._v(")")]),n("p",[t._v("以下是实现该算法的代码")]),t._m(331),t._m(332),t._m(333),t._m(334),n("p",[t._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"896",height:"1008"}}),t._v(")")]),n("p",[t._v("以下是实现该算法的代码")]),t._m(335),n("p",[t._v("以上算法使用了递归的思想。递归的本质就是压栈，每递归执行一次函数，就将该函数的信息（比如参数，内部的变量，执行到的行数）压栈，直到遇到终止条件，然后出栈并继续执行函数。对于以上递归函数的调用轨迹如下")]),t._m(336),n("p",[t._v("该算法的操作次数是可以这样计算：递归了两次，每次数据量是数组的一半，并且最后把整个数组迭代了一次，所以得出表达式 "),n("code",[t._v("2T(N / 2) + T(N)")]),t._v(" （T 代表时间，N 代表数据量）。根据该表达式可以套用 "),n("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fwww.wikiwand.com%2Fzh-hans%2F%25E4%25B8%25BB%25E5%25AE%259A%25E7%2590%2586",target:"_blank",rel:"noopener noreferrer"}},[t._v("该公式"),n("OutboundLink")],1),t._v(" 得出时间复杂度为 "),n("code",[t._v("O(N * logN)")])]),t._m(337),n("p",[t._v("快排的原理如下。随机选取一个数组中的值作为基准值，从左至右取值与基准值对比大小。比基准值小的放数组左边，大的放右边，对比完成后将基准值和第一个比基准值大的值交换位置。然后将数组以基准值的位置分为两部分，继续递归以上操作。")]),n("p",[t._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"824",height:"506"}}),t._v(")")]),n("p",[t._v("以下是实现该算法的代码")]),t._m(338),n("p",[t._v("该算法的复杂度和归并排序是相同的，但是额外空间复杂度比归并排序少，只需 O(logN)，并且相比归并排序来说，所需的常数时间也更少。")]),t._m(339),n("p",[n("strong",[t._v("Sort Colors")]),t._v("：该题目来自 "),n("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fleetcode.com%2Fproblems%2Fsort-colors%2Fdescription%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode"),n("OutboundLink")],1),t._v("，题目需要我们将 "),n("code",[t._v("[2,0,2,1,1,0]")]),t._v(" 排序成 "),n("code",[t._v("[0,0,1,1,2,2]")]),t._v(" ，这个问题就可以使用三路快排的思想。")]),n("p",[t._v("以下是代码实现")]),t._m(340),n("p",[n("strong",[t._v("Kth Largest Element in an Array")]),t._v("：该题目来自 "),n("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fleetcode.com%2Fproblems%2Fkth-largest-element-in-an-array%2Fdescription%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode"),n("OutboundLink")],1),t._v("，题目需要找出数组中第 K 大的元素，这问题也可以使用快排的思路。并且因为是找出第 K 大元素，所以在分离数组的过程中，可以找出需要的元素在哪边，然后只需要排序相应的一边数组就好。")]),n("p",[t._v("以下是代码实现")]),t._m(341),t._m(342),n("p",[t._v("堆排序利用了二叉堆的特性来做，二叉堆通常用数组表示，并且二叉堆是一颗完全二叉树（所有叶节点（最底层的节点）都是从左往右顺序排序，并且其他层的节点都是满的）。二叉堆又分为大根堆与小根堆。")]),t._m(343),t._m(344),t._m(345),n("p",[t._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"1280",height:"367"}}),t._v(")")]),n("p",[t._v("以下是实现该算法的代码")]),t._m(346),n("p",[t._v("以上代码实现了小根堆，如果需要实现大根堆，只需要把节点对比反一下就好。")]),n("p",[t._v("该算法的复杂度是 O(logN)")]),t._m(347),n("p",[t._v("每个语言的排序内部实现都是不同的。")]),n("p",[t._v("对于 JS 来说，数组长度大于 10 会采用快排，否则使用插入排序 "),n("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fv8%2Fv8%2Fblob%2Fad82a40509c5b5b4680d4299c8f08d6c6d31af3c%2Fsrc%2Fjs%2Farray.js%23L760%3A7",target:"_blank",rel:"noopener noreferrer"}},[t._v("源码实现"),n("OutboundLink")],1),t._v(" 。选择插入排序是因为虽然时间复杂度很差，但是在数据量很小的情况下和 "),n("code",[t._v("O(N * logN)")]),t._v("相差无几，然而插入排序需要的常数时间很小，所以相对别的排序来说更快。")]),n("p",[t._v("对于 Java 来说，还会考虑内部的元素的类型。对于存储对象的数组来说，会采用稳定性好的算法。稳定性的意思就是对于相同值来说，相对顺序不能改变。")]),t._m(348),t._m(349),t._m(350),t._m(351),t._m(352),n("p",[t._v("工厂模式分为好几种，这里就不一一讲解了，以下是一个简单工厂模式的例子")]),t._m(353),t._m(354),n("p",[t._v("可以想象一个场景。假设有一份很复杂的代码需要用户去调用，但是用户并不关心这些复杂的代码，只需要你提供给我一个接口去调用，用户只负责传递需要的参数，至于这些参数怎么使用，内部有什么逻辑是不关心的，只需要你最后返回我一个实例。这个构造过程就是工厂。")]),n("p",[t._v("工厂起到的作用就是隐藏了创建实例的复杂度，只需要提供一个接口，简单清晰。")]),n("p",[t._v("在 Vue 源码中，你也可以看到工厂模式的使用，比如创建异步组件")]),t._m(355),t._m(356),t._m(357),n("p",[t._v("单例模式很常用，比如全局缓存、全局状态管理等等这些只需要一个对象，就可以使用单例模式。")]),n("p",[t._v("单例模式的核心就是保证全局只有一个对象可以访问。因为 JS 是门无类的语言，所以别的语言实现单例的方式并不能套入 JS 中，我们只需要用一个变量确保实例只创建一次就行，以下是如何实现单例模式的例子")]),t._m(358),n("p",[t._v("在 Vuex 源码中，你也可以看到单例模式的使用，虽然它的实现方式不大一样，通过一个外部变量来控制只安装一次 Vuex")]),t._m(359),t._m(360),n("p",[t._v("适配器用来解决两个接口不兼容的情况，不需要改变已有的接口，通过包装一层的方式实现两个接口的正常协作。")]),n("p",[t._v("以下是如何实现适配器模式的例子")]),t._m(361),t._m(362),t._m(363),n("p",[t._v("装饰模式不需要改变已有的接口，作用是给对象添加功能。就像我们经常需要给手机戴个保护套防摔一样，不改变手机自身，给手机添加了保护套提供防摔功能。")]),n("p",[t._v("以下是如何实现装饰模式的例子，使用了 ES7 中的装饰器语法")]),t._m(364),n("p",[t._v("在 React 中，装饰模式其实随处可见")]),t._m(365),t._m(366),n("p",[t._v("代理是为了控制对对象的访问，不让外部直接访问到对象。在现实生活中，也有很多代理的场景。比如你需要买一件国外的产品，这时候你可以通过代购来购买产品。")]),n("p",[t._v("在实际代码中其实代理的场景很多，也就不举框架中的例子了，比如事件代理就用到了代理模式。")]),t._m(367),t._m(368),t._m(369),n("p",[t._v("发布-订阅模式也叫做观察者模式。通过一对一或者一对多的依赖关系，当对象发生改变时，订阅方都会收到通知。在现实生活中，也有很多类似场景，比如我需要在购物网站上购买一个产品，但是发现该产品目前处于缺货状态，这时候我可以点击有货通知的按钮，让网站在产品有货的时候通过短信通知我。")]),n("p",[t._v("在实际代码中其实发布-订阅模式也很常见，比如我们点击一个按钮触发了点击事件就是使用了该模式")]),t._m(370),t._m(371),n("p",[t._v("如果你对于如何实现响应式还有疑问，可以阅读我之前的文章 "),n("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fjuejin.im%2Fpost%2F5b5eb69a5188251af86bfe00",target:"_blank",rel:"noopener noreferrer"}},[t._v("深度解析 Vue 响应式原理"),n("OutboundLink")],1)]),n("p",[t._v("作者：夕阳")]),n("p",[t._v("链接：https://juejin.im/post/5ba34e54e51d450e5162789b")]),n("p",[t._v("来源：掘金")]),n("p",[t._v("著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"如何写一个漂亮的简历"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何写一个漂亮的简历","aria-hidden":"true"}},[this._v("#")]),this._v(" 如何写一个漂亮的简历")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("喜欢说自己的特长、优点，用人方真的不关注你的性格是否阳光等等")]),e("li",[this._v("个人技能能够占半页的篇幅，而且长得也都差不多")]),e("li",[this._v("项目经验流水账，比如我会用这个 API 实现了某某功能")]),e("li",[this._v("简历页数过多，真心看不下去")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("技术名词注意大小写")]),e("li",[this._v("突出个人亮点，扩充内容。比如在项目中如何找到 Bug，解决 Bug 的过程；比如如何发现的性能问题，如何解决性能问题，最终提升了多少性能；比如为何如此选型，目的是什么，较其他有什么优点等等。总体思路就是不写流水账，突出你在项目中具有不错的解决问题的能力和独立思考的能力。")]),e("li",[this._v("斟酌熟悉、精通等字眼，不要给自己挖坑")]),e("li",[this._v("确保每一个写上去的技术点自己都能说出点什么，杜绝面试官问你一个技术点，你只能答出会用 API 这种减分的情况")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"js-相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js-相关","aria-hidden":"true"}},[this._v("#")]),this._v(" JS 相关")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"谈谈变量提升？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#谈谈变量提升？","aria-hidden":"true"}},[this._v("#")]),this._v(" 谈谈变量提升？")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("接下来让我们看一个老生常谈的例子，"),e("code",[this._v("var")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("b() // call b\nconsole.log(a) // undefined\n\nvar a = 'Hello world'\n\nfunction b() {\n    console.log('call b')\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("b() // call b second\n\nfunction b() {\n    console.log('call b fist')\n}\nfunction b() {\n    console.log('call b second')\n}\nvar b = 'Hello world'\n复制代码\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("code",[t._v("var")]),t._v(" 会产生很多错误，所以在 ES6中引入了 "),n("code",[t._v("let")]),t._v("。"),n("code",[t._v("let")]),t._v(" 不能在声明前使用，但是这并不是常说的 "),n("code",[t._v("let")]),t._v(" 不会提升，"),n("code",[t._v("let")]),t._v(" 提升了，在第一阶段内存也已经为他开辟好了空间，但是因为这个声明的特性导致了并不能在声明前使用。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"bind、call、apply-区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bind、call、apply-区别","aria-hidden":"true"}},[this._v("#")]),this._v(" bind、call、apply 区别")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("call")]),this._v(" 和 "),e("code",[this._v("apply")]),this._v(" 都是为了解决改变 "),e("code",[this._v("this")]),this._v(" 的指向。作用都是相同的，只是传参的方式不同。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("除了第一个参数外，"),e("code",[this._v("call")]),this._v(" 可以接收一个参数列表，"),e("code",[this._v("apply")]),this._v(" 只接受一个参数数组。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("let a = {\n    value: 1\n}\nfunction getValue(name, age) {\n    console.log(name)\n    console.log(age)\n    console.log(this.value)\n}\ngetValue.call(a, 'yck', '24')\ngetValue.apply(a, ['yck', '24'])\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("bind")]),this._v(" 和其他两个方法作用也是一致的，只是该方法会返回一个函数。并且我们可以通过 "),e("code",[this._v("bind")]),this._v(" 实现柯里化。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"如何实现一个-bind-函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何实现一个-bind-函数","aria-hidden":"true"}},[this._v("#")]),this._v(" 如何实现一个 bind 函数")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("不传入第一个参数，那么默认为 "),e("code",[this._v("window")])]),e("li",[this._v("改变了 this 指向，让新的对象可以执行该函数。那么思路是否可以变成给新的对象添加一个函数，然后在执行完以后删除？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("Function.prototype.myBind = function (context) {\n  if (typeof this !== 'function') {\n    throw new TypeError('Error')\n  }\n  var _this = this\n  var args = [...arguments].slice(1)\n  // 返回一个函数\n  return function F() {\n    // 因为返回了一个函数，我们可以 new F()，所以需要判断\n    if (this instanceof F) {\n      return new _this(...args, ...arguments)\n    }\n    return _this.apply(context, args.concat(...arguments))\n  }\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"如何实现一个-call-函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何实现一个-call-函数","aria-hidden":"true"}},[this._v("#")]),this._v(" 如何实现一个 call 函数")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("Function.prototype.myCall = function (context) {\n  var context = context || window\n  // 给 context 添加一个属性\n  // getValue.call(a, 'yck', '24') => a.fn = getValue\n  context.fn = this\n  // 将 context 后面的参数取出来\n  var args = [...arguments].slice(1)\n  // getValue.call(a, 'yck', '24') => a.fn('yck', '24')\n  var result = context.fn(...args)\n  // 删除 fn\n  delete context.fn\n  return result\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"如何实现一个-apply-函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何实现一个-apply-函数","aria-hidden":"true"}},[this._v("#")]),this._v(" 如何实现一个 apply 函数")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("Function.prototype.myApply = function (context) {\n  var context = context || window\n  context.fn = this\n\n  var result\n  // 需要判断是否存储第二个参数\n  // 如果存在，就将第二个参数展开\n  if (arguments[1]) {\n    result = context.fn(...arguments[1])\n  } else {\n    result = context.fn()\n  }\n\n  delete context.fn\n  return result\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"简单说下原型链？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简单说下原型链？","aria-hidden":"true"}},[this._v("#")]),this._v(" 简单说下原型链？")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/9/19/165f189f736f19fd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"prototype"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("每个函数都有 "),e("code",[this._v("prototype")]),this._v(" 属性，除了 "),e("code",[this._v("Function.prototype.bind()")]),this._v("，该属性指向原型。")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("每个对象都有 "),n("code",[t._v("__proto__")]),t._v(" 属性，指向了创建该对象的构造函数的原型。其实这个属性指向了 "),n("code",[t._v("[[prototype]]")]),t._v("，但是 "),n("code",[t._v("[[prototype]]")]),t._v(" 是内部属性，我们并不能访问到，所以使用 "),n("code",[t._v("_proto_")]),t._v(" 来访问。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("对象可以通过 "),e("code",[this._v("__proto__")]),this._v(" 来寻找不属于该对象的属性，"),e("code",[this._v("__proto__")]),this._v(" 将对象连接起来组成了原型链。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"怎么判断对象类型？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#怎么判断对象类型？","aria-hidden":"true"}},[this._v("#")]),this._v(" 怎么判断对象类型？")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[t._v("可以通过 "),n("code",[t._v("Object.prototype.toString.call(xx)")]),t._v("。这样我们就可以获得类似 "),n("code",[t._v("[object Type]")]),t._v(" 的字符串。")]),n("li",[n("code",[t._v("instanceof")]),t._v(" 可以正确的判断对象的类型，因为内部机制是通过判断对象的原型链中是不是能找到类型的 "),n("code",[t._v("prototype")]),t._v("。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"箭头函数的特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数的特点","aria-hidden":"true"}},[this._v("#")]),this._v(" 箭头函数的特点")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function a() {\n    return () => {\n        return () => {\n        \tconsole.log(this)\n        }\n    }\n}\nconsole.log(a()()())\n复制代码\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("箭头函数其实是没有 "),n("code",[t._v("this")]),t._v(" 的，这个函数中的 "),n("code",[t._v("this")]),t._v(" 只取决于他外面的第一个不是箭头函数的函数的 "),n("code",[t._v("this")]),t._v("。在这个例子中，因为调用 "),n("code",[t._v("a")]),t._v(" 符合前面代码中的第一个情况，所以 "),n("code",[t._v("this")]),t._v(" 是 "),n("code",[t._v("window")]),t._v("。并且 "),n("code",[t._v("this")]),t._v(" 一旦绑定了上下文，就不会被任何代码改变。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"this"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#this","aria-hidden":"true"}},[this._v("#")]),this._v(" This")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("this")]),this._v(" 是很多人会混淆的概念，但是其实他一点都不难，你只需要记住几个规则就可以了。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function foo() {\n\tconsole.log(this.a)\n}\nvar a = 1\nfoo()\n\nvar obj = {\n\ta: 2,\n\tfoo: foo\n}\nobj.foo()\n\n// 以上两者情况 `this` 只依赖于调用函数前的对象，优先级是第二个情况大于第一个情况\n\n// 以下情况是优先级最高的，`this` 只会绑定在 `c` 上，不会被任何方式修改 `this` 指向\nvar c = new foo()\nc.a = 3\nconsole.log(c.a)\n\n// 还有种就是利用 call，apply，bind 改变 this，这个优先级仅次于 new\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"async、await-优缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#async、await-优缺点","aria-hidden":"true"}},[this._v("#")]),this._v(" async、await 优缺点")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("code",[t._v("async 和 await")]),t._v(" 相比直接使用 "),n("code",[t._v("Promise")]),t._v(" 来说，优势在于处理 "),n("code",[t._v("then")]),t._v(" 的调用链，能够更清晰准确的写出代码。缺点在于滥用 "),n("code",[t._v("await")]),t._v(" 可能会导致性能问题，因为 "),n("code",[t._v("await")]),t._v(" 会阻塞代码，也许之后的异步代码并不依赖于前者，但仍然需要等待前者完成，导致代码失去了并发性。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("下面来看一个使用 "),e("code",[this._v("await")]),this._v(" 的代码。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("var a = 0\nvar b = async () => {\n  a = a + await 10\n  console.log('2', a) // -> '2' 10\n  a = (await 10) + a\n  console.log('3', a) // -> '3' 20\n}\nb()\na++\nconsole.log('1', a) // -> '1' 1\n复制代码\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[t._v("首先函数 "),n("code",[t._v("b")]),t._v(" 先执行，在执行到 "),n("code",[t._v("await 10")]),t._v(" 之前变量 "),n("code",[t._v("a")]),t._v(" 还是 0，因为在 "),n("code",[t._v("await")]),t._v(" 内部实现了 "),n("code",[t._v("generators")]),t._v(" ，"),n("code",[t._v("generators")]),t._v(" 会保留堆栈中东西，所以这时候 "),n("code",[t._v("a = 0")]),t._v(" 被保存了下来")]),n("li",[t._v("因为 "),n("code",[t._v("await")]),t._v(" 是异步操作，遇到"),n("code",[t._v("await")]),t._v("就会立即返回一个"),n("code",[t._v("pending")]),t._v("状态的"),n("code",[t._v("Promise")]),t._v("对象，暂时返回执行代码的控制权，使得函数外的代码得以继续执行，所以会先执行 "),n("code",[t._v("console.log('1', a)")])]),n("li",[t._v("这时候同步代码执行完毕，开始执行异步代码，将保存下来的值拿出来使用，这时候 "),n("code",[t._v("a = 10")])]),n("li",[t._v("然后后面就是常规执行代码了")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"generator-原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#generator-原理","aria-hidden":"true"}},[this._v("#")]),this._v(" generator 原理")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("// 使用 * 表示这是一个 Generator 函数\n// 内部可以通过 yield 暂停代码\n// 通过调用 next 恢复执行\nfunction* test() {\n  let a = 1 + 2;\n  yield 2;\n  yield 3;\n}\nlet b = test();\nconsole.log(b.next()); // >  { value: 2, done: false }\nconsole.log(b.next()); // >  { value: 3, done: false }\nconsole.log(b.next()); // >  { value: undefined, done: true }\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("从以上代码可以发现，加上 "),e("code",[this._v("*")]),this._v(" 的函数执行后拥有了 "),e("code",[this._v("next")]),this._v(" 函数，也就是说函数执行后返回了一个对象。每次调用 "),e("code",[this._v("next")]),this._v(" 函数可以继续执行被暂停的代码。以下是 Generator 函数的简单实现")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('// cb 也就是编译过的 test 函数\nfunction generator(cb) {\n  return (function() {\n    var object = {\n      next: 0,\n      stop: function() {}\n    };\n\n    return {\n      next: function() {\n        var ret = cb(object);\n        if (ret === undefined) return { value: undefined, done: true };\n        return {\n          value: ret,\n          done: false\n        };\n      }\n    };\n  })();\n}\n// 如果你使用 babel 编译后可以发现 test 函数变成了这样\nfunction test() {\n  var a;\n  return generator(function(_context) {\n    while (1) {\n      switch ((_context.prev = _context.next)) {\n        // 可以发现通过 yield 将代码分割成几块\n        // 每次执行 next 函数就执行一块代码\n        // 并且表明下次需要执行哪块代码\n        case 0:\n          a = 1 + 2;\n          _context.next = 4;\n          return 2;\n        case 4:\n          _context.next = 6;\n          return 3;\n\t\t// 执行完毕\n        case 6:\n        case "end":\n          return _context.stop();\n      }\n    }\n  });\n}\n复制代码\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"promise"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise","aria-hidden":"true"}},[this._v("#")]),this._v(" Promise")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("可以把 Promise 看成一个状态机。初始是 "),n("code",[t._v("pending")]),t._v(" 状态，可以通过函数 "),n("code",[t._v("resolve")]),t._v(" 和 "),n("code",[t._v("reject")]),t._v(" ，将状态转变为 "),n("code",[t._v("resolved")]),t._v(" 或者 "),n("code",[t._v("rejected")]),t._v(" 状态，状态一旦改变就不能再次变化。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("then")]),this._v(" 函数会返回一个 Promise 实例，并且该返回值是一个新的实例而不是之前的实例。因为 Promise 规范规定除了 "),e("code",[this._v("pending")]),this._v(" 状态，其他状态是不可以改变的，如果返回的是一个相同实例的话，多个 "),e("code",[this._v("then")]),this._v(" 调用就失去意义了。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("对于 "),e("code",[this._v("then")]),this._v(" 来说，本质上可以把它看成是 "),e("code",[this._v("flatMap")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"如何实现一个-promise"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何实现一个-promise","aria-hidden":"true"}},[this._v("#")]),this._v(" 如何实现一个 Promise")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('// 三种状态\nconst PENDING = "pending";\nconst RESOLVED = "resolved";\nconst REJECTED = "rejected";\n// promise 接收一个函数参数，该函数会立即执行\nfunction MyPromise(fn) {\n  let _this = this;\n  _this.currentState = PENDING;\n  _this.value = undefined;\n  // 用于保存 then 中的回调，只有当 promise\n  // 状态为 pending 时才会缓存，并且每个实例至多缓存一个\n  _this.resolvedCallbacks = [];\n  _this.rejectedCallbacks = [];\n\n  _this.resolve = function (value) {\n    if (value instanceof MyPromise) {\n      // 如果 value 是个 Promise，递归执行\n      return value.then(_this.resolve, _this.reject)\n    }\n    setTimeout(() => { // 异步执行，保证执行顺序\n      if (_this.currentState === PENDING) {\n        _this.currentState = RESOLVED;\n        _this.value = value;\n        _this.resolvedCallbacks.forEach(cb => cb());\n      }\n    })\n  };\n\n  _this.reject = function (reason) {\n    setTimeout(() => { // 异步执行，保证执行顺序\n      if (_this.currentState === PENDING) {\n        _this.currentState = REJECTED;\n        _this.value = reason;\n        _this.rejectedCallbacks.forEach(cb => cb());\n      }\n    })\n  }\n  // 用于解决以下问题\n  // new Promise(() => throw Error(\'error))\n  try {\n    fn(_this.resolve, _this.reject);\n  } catch (e) {\n    _this.reject(e);\n  }\n}\n\nMyPromise.prototype.then = function (onResolved, onRejected) {\n  var self = this;\n  // 规范 2.2.7，then 必须返回一个新的 promise\n  var promise2;\n  // 规范 2.2.onResolved 和 onRejected 都为可选参数\n  // 如果类型不是函数需要忽略，同时也实现了透传\n  // Promise.resolve(4).then().then((value) => console.log(value))\n  onResolved = typeof onResolved === \'function\' ? onResolved : v => v;\n  onRejected = typeof onRejected === \'function\' ? onRejected : r => throw r;\n\n  if (self.currentState === RESOLVED) {\n    return (promise2 = new MyPromise(function (resolve, reject) {\n      // 规范 2.2.4，保证 onFulfilled，onRjected 异步执行\n      // 所以用了 setTimeout 包裹下\n      setTimeout(function () {\n        try {\n          var x = onResolved(self.value);\n          resolutionProcedure(promise2, x, resolve, reject);\n        } catch (reason) {\n          reject(reason);\n        }\n      });\n    }));\n  }\n\n  if (self.currentState === REJECTED) {\n    return (promise2 = new MyPromise(function (resolve, reject) {\n      setTimeout(function () {\n        // 异步执行onRejected\n        try {\n          var x = onRejected(self.value);\n          resolutionProcedure(promise2, x, resolve, reject);\n        } catch (reason) {\n          reject(reason);\n        }\n      });\n    }));\n  }\n\n  if (self.currentState === PENDING) {\n    return (promise2 = new MyPromise(function (resolve, reject) {\n      self.resolvedCallbacks.push(function () {\n        // 考虑到可能会有报错，所以使用 try/catch 包裹\n        try {\n          var x = onResolved(self.value);\n          resolutionProcedure(promise2, x, resolve, reject);\n        } catch (r) {\n          reject(r);\n        }\n      });\n\n      self.rejectedCallbacks.push(function () {\n        try {\n          var x = onRejected(self.value);\n          resolutionProcedure(promise2, x, resolve, reject);\n        } catch (r) {\n          reject(r);\n        }\n      });\n    }));\n  }\n};\n// 规范 2.3\nfunction resolutionProcedure(promise2, x, resolve, reject) {\n  // 规范 2.3.1，x 不能和 promise2 相同，避免循环引用\n  if (promise2 === x) {\n    return reject(new TypeError("Error"));\n  }\n  // 规范 2.3.2\n  // 如果 x 为 Promise，状态为 pending 需要继续等待否则执行\n  if (x instanceof MyPromise) {\n    if (x.currentState === PENDING) {\n      x.then(function (value) {\n        // 再次调用该函数是为了确认 x resolve 的\n        // 参数是什么类型，如果是基本类型就再次 resolve\n        // 把值传给下个 then\n        resolutionProcedure(promise2, value, resolve, reject);\n      }, reject);\n    } else {\n      x.then(resolve, reject);\n    }\n    return;\n  }\n  // 规范 2.3.3.3.3\n  // reject 或者 resolve 其中一个执行过得话，忽略其他的\n  let called = false;\n  // 规范 2.3.3，判断 x 是否为对象或者函数\n  if (x !== null && (typeof x === "object" || typeof x === "function")) {\n    // 规范 2.3.3.2，如果不能取出 then，就 reject\n    try {\n      // 规范 2.3.3.1\n      let then = x.then;\n      // 如果 then 是函数，调用 x.then\n      if (typeof then === "function") {\n        // 规范 2.3.3.3\n        then.call(\n          x,\n          y => {\n            if (called) return;\n            called = true;\n            // 规范 2.3.3.3.1\n            resolutionProcedure(promise2, y, resolve, reject);\n          },\n          e => {\n            if (called) return;\n            called = true;\n            reject(e);\n          }\n        );\n      } else {\n        // 规范 2.3.3.4\n        resolve(x);\n      }\n    } catch (e) {\n      if (called) return;\n      called = true;\n      reject(e);\n    }\n  } else {\n    // 规范 2.3.4，x 为基本类型\n    resolve(x);\n  }\n}\n复制代码\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"和-区别，什么情况用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#和-区别，什么情况用","aria-hidden":"true"}},[this._v("#")]),this._v(" == 和 ===区别，什么情况用 ==")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("上图中的 "),e("code",[this._v("toPrimitive")]),this._v(" 就是对象转基本类型。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这里来解析一道题目 "),e("code",[this._v("[] == ![] // -> true")]),this._v(" ，下面是这个表达式为何为 "),e("code",[this._v("true")]),this._v(" 的步骤")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("// [] 转成 true，然后取反变成 false\n[] == false\n// 根据第 8 条得出\n[] == ToNumber(false)\n[] == 0\n// 根据第 10 条得出\nToPrimitive([]) == 0\n// [].toString() -> ''\n'' == 0\n// 根据第 6 条得出\n0 == 0 // -> true\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("===")]),this._v(" 用于判断两者类型和值是否相同。 在开发中，对于后端返回的 "),e("code",[this._v("code")]),this._v("，可以通过 "),e("code",[this._v("==")]),this._v(" 去判断。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"垃圾回收"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收","aria-hidden":"true"}},[this._v("#")]),this._v(" 垃圾回收")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"新生代算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#新生代算法","aria-hidden":"true"}},[this._v("#")]),this._v(" 新生代算法")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"老生代算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#老生代算法","aria-hidden":"true"}},[this._v("#")]),this._v(" 老生代算法")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("新生代中的对象是否已经经历过一次 Scavenge 算法，如果经历过的话，会将对象从新生代空间移到老生代空间中。")]),e("li",[this._v("To 空间的对象占比大小超过 25 %。在这种情况下，为了不影响到内存分配，会将对象从新生代空间移到老生代空间中。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("enum AllocationSpace {\n  // TODO(v8:7464): Actually map this space's memory as read-only.\n  RO_SPACE,    // 不变的对象空间\n  NEW_SPACE,   // 新生代用于 GC 复制算法的空间\n  OLD_SPACE,   // 老生代常驻对象空间\n  CODE_SPACE,  // 老生代代码对象空间\n  MAP_SPACE,   // 老生代 map 对象\n  LO_SPACE,    // 老生代大空间对象\n  NEW_LO_SPACE,  // 新生代大空间对象\n\n  FIRST_SPACE = RO_SPACE,\n  LAST_SPACE = NEW_LO_SPACE,\n  FIRST_GROWABLE_PAGED_SPACE = OLD_SPACE,\n  LAST_GROWABLE_PAGED_SPACE = MAP_SPACE\n};\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("某一个空间没有分块的时候")]),e("li",[this._v("空间中被对象超过一定限制")]),e("li",[this._v("空间不能保证新生代中的对象移动到老生代中")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"闭包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#闭包","aria-hidden":"true"}},[this._v("#")]),this._v(" 闭包")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function A() {\n  let a = 1\n  function B() {\n      console.log(a)\n  }\n  return B\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("经典面试题，循环中使用闭包解决 "),e("code",[this._v("var")]),this._v(" 定义函数的问题")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("for ( var i=1; i<=5; i++) {\n\tsetTimeout( function timer() {\n\t\tconsole.log( i );\n\t}, i*1000 );\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("首先因为 "),e("code",[this._v("setTimeout")]),this._v(" 是个异步函数，所有会先把循环全部执行完毕，这时候 "),e("code",[this._v("i")]),this._v(" 就是 6 了，所以会输出一堆 6。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("for (var i = 1; i <= 5; i++) {\n  (function(j) {\n    setTimeout(function timer() {\n      console.log(j);\n    }, j * 1000);\n  })(i);\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("第二种就是使用 "),e("code",[this._v("setTimeout")]),this._v("  的第三个参数")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("for ( var i=1; i<=5; i++) {\n\tsetTimeout( function timer(j) {\n\t\tconsole.log( j );\n\t}, i*1000, i);\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("第三种就是使用 "),e("code",[this._v("let")]),this._v(" 定义  "),e("code",[this._v("i")]),this._v(" 了")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("for ( let i=1; i<=5; i++) {\n\tsetTimeout( function timer() {\n\t\tconsole.log( i );\n\t}, i*1000 );\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("因为对于 "),e("code",[this._v("let")]),this._v(" 来说，他会创建一个块级作用域，相当于")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("{ // 形成块级作用域\n  let i = 0\n  {\n    let ii = i\n    setTimeout( function timer() {\n        console.log( ii );\n    }, i*1000 );\n  }\n  i++\n  {\n    let ii = i\n  }\n  i++\n  {\n    let ii = i\n  }\n  ...\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"基本数据类型和引⽤类型在存储上的差别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型和引⽤类型在存储上的差别","aria-hidden":"true"}},[this._v("#")]),this._v(" 基本数据类型和引⽤类型在存储上的差别")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"浏览器-eventloop-和-node-中的有什么区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器-eventloop-和-node-中的有什么区别","aria-hidden":"true"}},[this._v("#")]),this._v(" 浏览器 Eventloop 和 Node 中的有什么区别")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("console.log('script start');\n\nsetTimeout(function() {\n  console.log('setTimeout');\n}, 0);\n\nconsole.log('script end');\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("以上代码虽然 "),e("code",[this._v("setTimeout")]),this._v(" 延时为 0，其实还是异步。这是因为 HTML5 标准规定这个函数第二个参数不得小于 4 毫秒，不足会自动增加。所以 "),e("code",[this._v("setTimeout")]),this._v(" 还是会在 "),e("code",[this._v("script end")]),this._v(" 之后打印。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("不同的任务源会被分配到不同的 Task 队列中，任务源可以分为 微任务（microtask） 和 宏任务（macrotask）。在 ES6 规范中，microtask 称为 "),e("code",[this._v("jobs")]),this._v("，macrotask 称为 "),e("code",[this._v("task")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("console.log('script start');\n\nsetTimeout(function() {\n  console.log('setTimeout');\n}, 0);\n\nnew Promise((resolve) => {\n    console.log('Promise')\n    resolve()\n}).then(function() {\n  console.log('promise1');\n}).then(function() {\n  console.log('promise2');\n});\n\nconsole.log('script end');\n// script start => Promise => script end => promise1 => promise2 => setTimeout\n复制代码\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("以上代码虽然 "),n("code",[t._v("setTimeout")]),t._v(" 写在 "),n("code",[t._v("Promise")]),t._v(" 之前，但是因为 "),n("code",[t._v("Promise")]),t._v(" 属于微任务而 "),n("code",[t._v("setTimeout")]),t._v(" 属于宏任务，所以会有以上的打印。")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("微任务包括 "),n("code",[t._v("process.nextTick")]),t._v(" ，"),n("code",[t._v("promise")]),t._v(" ，"),n("code",[t._v("Object.observe")]),t._v(" ，"),n("code",[t._v("MutationObserver")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("宏任务包括 "),n("code",[t._v("script")]),t._v(" ， "),n("code",[t._v("setTimeout")]),t._v(" ，"),n("code",[t._v("setInterval")]),t._v(" ，"),n("code",[t._v("setImmediate")]),t._v(" ，"),n("code",[t._v("I/O")]),t._v(" ，"),n("code",[t._v("UI rendering")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("很多人有个误区，认为微任务快于宏任务，其实是错误的。因为宏任务中包括了 "),e("code",[this._v("script")]),this._v(" ，浏览器会先执行一个宏任务，接下来有异步代码的话就先执行微任务。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("执行同步代码，这属于宏任务")]),e("li",[this._v("执行栈为空，查询是否有微任务需要执行")]),e("li",[this._v("执行所有微任务")]),e("li",[this._v("必要的话渲染 UI")]),e("li",[this._v("然后开始下一轮 Event loop，执行宏任务中的异步代码")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"node-中的-event-loop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node-中的-event-loop","aria-hidden":"true"}},[this._v("#")]),this._v(" Node 中的 Event loop")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("┌───────────────────────┐\n┌─>│        timers         │\n│  └──────────┬────────────┘\n│  ┌──────────┴────────────┐\n│  │     I/O callbacks     │\n│  └──────────┬────────────┘\n│  ┌──────────┴────────────┐\n│  │     idle, prepare     │\n│  └──────────┬────────────┘      ┌───────────────┐\n│  ┌──────────┴────────────┐      │   incoming:   │\n│  │         poll          │<──connections───     │\n│  └──────────┬────────────┘      │   data, etc.  │\n│  ┌──────────┴────────────┐      └───────────────┘\n│  │        check          │\n│  └──────────┬────────────┘\n│  ┌──────────┴────────────┐\n└──┤    close callbacks    │\n   └───────────────────────┘\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("timer")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("timers 阶段会执行 "),e("code",[this._v("setTimeout")]),this._v(" 和 "),e("code",[this._v("setInterval")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("一个 "),e("code",[this._v("timer")]),this._v(" 指定的时间并不是准确时间，而是在达到这个时间后尽快执行回调，可能会因为系统正在执行别的事务而延迟。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("下限的时间有一个范围："),e("code",[this._v("[1, 2147483647]")]),this._v(" ，如果设定的时间不在这个范围，将被设置为1。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("I/O 阶段会执行除了 close 事件，定时器和 "),e("code",[this._v("setImmediate")]),this._v(" 的回调")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("idle, prepare")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("poll")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("执行到点的定时器")]),e("li",[this._v("执行 poll 队列中的事件")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[t._v("如果 poll 队列不为空，会遍历回调队列并同步执行，直到队列为空或者系统限制")]),n("li",[t._v("如果 poll 队列为空，会有两件事发生\n"),n("ul",[n("li",[t._v("如果有 "),n("code",[t._v("setImmediate")]),t._v(" 需要执行，poll 阶段会停止并且进入到 check 阶段执行 "),n("code",[t._v("setImmediate")])]),n("li",[t._v("如果没有 "),n("code",[t._v("setImmediate")]),t._v(" 需要执行，会等待回调被加入到队列中并立即执行回调")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("check")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("check 阶段执行 "),e("code",[this._v("setImmediate")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("close callbacks")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("setTimeout(() => {\n    console.log('setTimeout');\n}, 0);\nsetImmediate(() => {\n    console.log('setImmediate');\n})\n// 这里可能会输出 setTimeout，setImmediate\n// 可能也会相反的输出，这取决于性能\n// 因为可能进入 event loop 用了不到 1 毫秒，这时候会执行 setImmediate\n// 否则会执行 setTimeout\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("var fs = require('fs')\n\nfs.readFile(__filename, () => {\n    setTimeout(() => {\n        console.log('timeout');\n    }, 0);\n    setImmediate(() => {\n        console.log('immediate');\n    });\n});\n// 因为 readFile 的回调在 poll 中执行\n// 发现有 setImmediate ，所以会立即跳到 check 阶段执行回调\n// 再去 timer 阶段执行 setTimeout\n// 所以以上输出一定是 setImmediate，setTimeout\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("setTimeout(()=>{\n    console.log('timer1')\n\n    Promise.resolve().then(function() {\n        console.log('promise1')\n    })\n}, 0)\n\nsetTimeout(()=>{\n    console.log('timer2')\n\n    Promise.resolve().then(function() {\n        console.log('promise2')\n    })\n}, 0)\n\n// 以上代码在浏览器和 node 中打印情况是不同的\n// 浏览器中一定打印 timer1, promise1, timer2, promise2\n// node 中可能打印 timer1, timer2, promise1, promise2\n// 也可能打印 timer1, promise1, timer2, promise2\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Node 中的 "),e("code",[this._v("process.nextTick")]),this._v(" 会先于其他 microtask 执行。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('setTimeout(() => {\n  console.log("timer1");\n\n  Promise.resolve().then(function() {\n    console.log("promise1");\n  });\n}, 0);\n\nprocess.nextTick(() => {\n  console.log("nextTick");\n});\n// nextTick, timer1, promise1\n复制代码\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"settimeout-倒计时误差"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#settimeout-倒计时误差","aria-hidden":"true"}},[this._v("#")]),this._v(" setTimeout 倒计时误差")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("JS 是单线程的，所以 "),e("code",[this._v("setTimeout")]),this._v(" 的误差其实是无法被完全解决的，原因有很多，可能是回调中的，有可能是浏览器中的各种事件导致。这也是为什么页面开久了，定时器会不准的原因，当然我们可以通过一定的办法去减少这个误差。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("var period = 60 * 1000 * 60 * 2\nvar startTime = new Date().getTime();\nvar count = 0\nvar end = new Date().getTime() + period\nvar interval = 1000\nvar currentInterval = interval\n\nfunction loop() {\n  count++\n  var offset = new Date().getTime() - (startTime + count * interval); // 代码执行所消耗的时间\n  var diff = end - new Date().getTime()\n  var h = Math.floor(diff / (60 * 1000 * 60))\n  var hdiff = diff % (60 * 1000 * 60)\n  var m = Math.floor(hdiff / (60 * 1000))\n  var mdiff = hdiff % (60 * 1000)\n  var s = mdiff / (1000)\n  var sCeil = Math.ceil(s)\n  var sFloor = Math.floor(s)\n  currentInterval = interval - offset // 得到下一次循环所消耗的时间\n  console.log('时：'+h, '分：'+m, '毫秒：'+s, '秒向上取整：'+sCeil, '代码执行时间：'+offset, '下次循环间隔'+currentInterval) // 打印 时 分 秒 代码执行时间 下次循环间隔\n\n  setTimeout(loop, currentInterval)\n}\n\nsetTimeout(loop, currentInterval)\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"防抖"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#防抖","aria-hidden":"true"}},[this._v("#")]),this._v(" 防抖")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("// func是用户传入需要防抖的函数\n// wait是等待时间\nconst debounce = (func, wait = 50) => {\n  // 缓存一个定时器id\n  let timer = 0\n  // 这里返回的函数是每次用户实际调用的防抖函数\n  // 如果已经设定过定时器了就清空上一次的定时器\n  // 开始一个新的定时器，延迟执行用户传入的方法\n  return function(...args) {\n    if (timer) clearTimeout(timer)\n    timer = setTimeout(() => {\n      func.apply(this, args)\n    }, wait)\n  }\n}\n// 不难看出如果用户调用该函数的间隔小于wait的情况下，上一次的时间还未到就被清除了，并不会执行函数\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("例如在搜索引擎搜索问题的时候，我们当然是希望用户输入完最后一个字才调用查询接口，这个时候适用"),e("code",[this._v("延迟执行")]),this._v("的防抖函数，它总是在一连串（间隔小于wait的）函数触发之后调用。")]),e("li",[this._v("例如用户给interviewMap点star的时候，我们希望用户点第一下的时候就去调用接口，并且成功之后改变star按钮的样子，用户就可以立马得到反馈是否star成功了，这个情况适用"),e("code",[this._v("立即执行")]),this._v("的防抖函数，它总是在第一次调用，并且下一次调用必须与前一次调用的时间间隔大于wait才会触发。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("// 这个是用来获取当前时间戳的\nfunction now() {\n  return +new Date()\n}\n/**\n * 防抖函数，返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行\n *\n * @param  {function} func        回调函数\n * @param  {number}   wait        表示时间窗口的间隔\n * @param  {boolean}  immediate   设置为ture时，是否立即调用函数\n * @return {function}             返回客户调用函数\n */\nfunction debounce (func, wait = 50, immediate = true) {\n  let timer, context, args\n  \n  // 延迟执行函数\n  const later = () => setTimeout(() => {\n    // 延迟函数执行完毕，清空缓存的定时器序号\n    timer = null\n    // 延迟执行的情况下，函数会在延迟函数中执行\n    // 使用到之前缓存的参数和上下文\n    if (!immediate) {\n      func.apply(context, args)\n      context = args = null\n    }\n  }, wait)\n\n  // 这里返回的函数是每次实际调用的函数\n  return function(...params) {\n    // 如果没有创建延迟执行函数（later），就创建一个\n    if (!timer) {\n      timer = later()\n      // 如果是立即执行，调用函数\n      // 否则缓存参数和调用上下文\n      if (immediate) {\n        func.apply(this, params)\n      } else {\n        context = this\n        args = params\n      }\n    // 如果已有延迟执行函数（later），调用的时候清除原来的并重新设定一个\n    // 这样做延迟函数会重新计时\n    } else {\n      clearTimeout(timer)\n      timer = later()\n    }\n  }\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("对于按钮防点击来说的实现：如果函数是立即执行的，就立即调用，如果函数是延迟执行的，就缓存上下文和参数，放到延迟函数中去执行。一旦我开始一个定时器，只要我定时器还在，你每次点击我都重新计时。一旦你点累了，定时器时间到，定时器重置为 "),e("code",[this._v("null")]),this._v("，就可以再次点击了。")]),e("li",[this._v("对于延时执行函数来说的实现：清除定时器ID，如果是延迟调用就调用函数")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"数组降维"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组降维","aria-hidden":"true"}},[this._v("#")]),this._v(" 数组降维")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[1, [2], 3].flatMap((v) => v + 1)\n// -> [2, 3, 4]\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("const flattenDeep = (arr) => Array.isArray(arr)\n  ? arr.reduce( (a, b) => [...a, ...flattenDeep(b)] , [])\n  : [arr]\n\nflattenDeep([1, [[2], [3, [4]], 5]])\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"深拷贝"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝","aria-hidden":"true"}},[this._v("#")]),this._v(" 深拷贝")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这个问题通常可以通过 "),e("code",[this._v("JSON.parse(JSON.stringify(object))")]),this._v(" 来解决。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("let a = {\n    age: 1,\n    jobs: {\n        first: 'FE'\n    }\n}\nlet b = JSON.parse(JSON.stringify(a))\na.jobs.first = 'native'\nconsole.log(b.jobs.first) // FE\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("会忽略 "),e("code",[this._v("undefined")])]),e("li",[this._v("会忽略 "),e("code",[this._v("symbol")])]),e("li",[this._v("不能序列化函数")]),e("li",[this._v("不能解决循环引用的对象")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("let obj = {\n  a: 1,\n  b: {\n    c: 2,\n    d: 3,\n  },\n}\nobj.c = obj.b\nobj.e = obj.a\nobj.b.c = obj.c\nobj.b.d = obj.b\nobj.b.e = obj.b.c\nlet newObj = JSON.parse(JSON.stringify(obj))\nconsole.log(newObj)\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在遇到函数、 "),e("code",[this._v("undefined")]),this._v(" 或者 "),e("code",[this._v("symbol")]),this._v(" 的时候，该对象也不能正常的序列化")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("let a = {\n    age: undefined,\n    sex: Symbol('male'),\n    jobs: function() {},\n    name: 'yck'\n}\nlet b = JSON.parse(JSON.stringify(a))\nconsole.log(b) // {name: \"yck\"}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("你会发现在上述情况中，该方法会忽略掉函数和 "),e("code",[this._v("undefined")]),this._v(" 。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果你所需拷贝的对象含有内置类型并且不包含函数，可以使用 "),e("code",[this._v("MessageChannel")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function structuralClone(obj) {\n  return new Promise(resolve => {\n    const {port1, port2} = new MessageChannel();\n    port2.onmessage = ev => resolve(ev.data);\n    port1.postMessage(obj);\n  });\n}\n\nvar obj = {a: 1, b: {\n    c: b\n}}\n// 注意该方法是异步的\n// 可以处理 undefined 和循环引用对象\n(async () => {\n  const clone = await structuralClone(obj)\n})()\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"typeof-于-instanceof-区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#typeof-于-instanceof-区别","aria-hidden":"true"}},[this._v("#")]),this._v(" typeof 于 instanceof 区别")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("typeof")]),this._v(" 对于基本类型，除了 "),e("code",[this._v("null")]),this._v(" 都可以显示正确的类型")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("typeof 1 // 'number'\ntypeof '1' // 'string'\ntypeof undefined // 'undefined'\ntypeof true // 'boolean'\ntypeof Symbol() // 'symbol'\ntypeof b // b 没有声明，但是还会显示 undefined\n复制代码\ntypeof` 对于对象，除了函数都会显示 `object\ntypeof [] // 'object'\ntypeof {} // 'object'\ntypeof console.log // 'function'\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("对于 "),e("code",[this._v("null")]),this._v(" 来说，虽然它是基本类型，但是会显示 "),e("code",[this._v("object")]),this._v("，这是一个存在很久了的 Bug")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("typeof null // 'object'\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("PS：为什么会出现这种情况呢？因为在 JS 的最初版本中，使用的是 32 位系统，为了性能考虑使用低位存储了变量的类型信息，"),e("code",[this._v("000")]),this._v(" 开头代表是对象，然而 "),e("code",[this._v("null")]),this._v(" 表示为全零，所以将它错误的判断为 "),e("code",[this._v("object")]),this._v(" 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("instanceof")]),this._v(" 可以正确的判断对象的类型，因为内部机制是通过判断对象的原型链中是不是能找到类型的 "),e("code",[this._v("prototype")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("我们也可以试着实现一下 "),e("code",[this._v("instanceof")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function instanceof(left, right) {\n    // 获得类型的原型\n    let prototype = right.prototype\n    // 获得对象的原型\n    left = left.__proto__\n    // 判断对象的类型是否等于类型的原型\n    while (true) {\n    \tif (left === null)\n    \t\treturn false\n    \tif (prototype === left)\n    \t\treturn true\n    \tleft = left.__proto__\n    }\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"浏览器相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器相关","aria-hidden":"true"}},[this._v("#")]),this._v(" 浏览器相关")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"cookie和localsrorage、session、indexdb-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie和localsrorage、session、indexdb-的区别","aria-hidden":"true"}},[this._v("#")]),this._v(" cookie和localSrorage、session、indexDB 的区别")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("table",[n("thead",[n("tr",[n("th",[t._v("特性")]),n("th",[t._v("cookie")]),n("th",[t._v("localStorage")]),n("th",[t._v("sessionStorage")]),n("th",[t._v("indexDB")])])]),n("tbody",[n("tr",[n("td",[t._v("数据生命周期")]),n("td",[t._v("一般由服务器生成，可以设置过期时间")]),n("td",[t._v("除非被清理，否则一直存在")]),n("td",[t._v("页面关闭就清理")]),n("td",[t._v("除非被清理，否则一直存在")])]),n("tr",[n("td",[t._v("数据存储大小")]),n("td",[t._v("4K")]),n("td",[t._v("5M")]),n("td",[t._v("5M")]),n("td",[t._v("无限")])]),n("tr",[n("td",[t._v("与服务端通信")]),n("td",[t._v("每次都会携带在 header 中，对于请求性能影响")]),n("td",[t._v("不参与")]),n("td",[t._v("不参与")]),n("td",[t._v("不参与")])])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("从上表可以看到，"),n("code",[t._v("cookie")]),t._v(" 已经不建议用于存储。如果没有大量数据存储需求的话，可以使用 "),n("code",[t._v("localStorage")]),t._v(" 和 "),n("code",[t._v("sessionStorage")]),t._v(" 。对于不怎么改变的数据尽量使用 "),n("code",[t._v("localStorage")]),t._v(" 存储，否则可以用 "),n("code",[t._v("sessionStorage")]),t._v(" 存储。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("对于 "),e("code",[this._v("cookie")]),this._v("，我们还需要注意安全性。")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("table",[n("thead",[n("tr",[n("th",[t._v("属性")]),n("th",[t._v("作用")])])]),n("tbody",[n("tr",[n("td",[t._v("value")]),n("td",[t._v("如果用于保存用户登录态，应该将该值加密，不能使用明文的用户标识")])]),n("tr",[n("td",[t._v("http-only")]),n("td",[t._v("不能通过 JS 访问 Cookie，减少 XSS 攻击")])]),n("tr",[n("td",[t._v("secure")]),n("td",[t._v("只能在协议为 HTTPS 的请求中携带")])]),n("tr",[n("td",[t._v("same-site")]),n("td",[t._v("规定浏览器不能在跨域请求中携带 Cookie，减少 CSRF 攻击")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"怎么判断页面是否加载完成？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#怎么判断页面是否加载完成？","aria-hidden":"true"}},[this._v("#")]),this._v(" 怎么判断页面是否加载完成？")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"如何解决跨域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何解决跨域","aria-hidden":"true"}},[this._v("#")]),this._v(" 如何解决跨域")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"jsonp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsonp","aria-hidden":"true"}},[this._v("#")]),this._v(" JSONP")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("JSONP 的原理很简单，就是利用 "),e("code",[this._v("<script>")]),this._v(" 标签没有跨域限制的漏洞。通过 "),e("code",[this._v("<script>")]),this._v(" 标签指向一个需要访问的地址并提供一个回调函数来接收数据当需要通讯时。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('<script src="http://domain/api?param1=a&param2=b&callback=jsonp"><\/script>\n<script>\n    function jsonp(data) {\n    \tconsole.log(data)\n\t}\n<\/script>    \n复制代码\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("JSONP 使用简单且兼容性不错，但是只限于 "),e("code",[this._v("get")]),this._v(" 请求。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('function jsonp(url, jsonpCallback, success) {\n  let script = document.createElement("script");\n  script.src = url;\n  script.async = true;\n  script.type = "text/javascript";\n  window[jsonpCallback] = function(data) {\n    success && success(data);\n  };\n  document.body.appendChild(script);\n}\njsonp(\n  "http://xxx",\n  "callback",\n  function(value) {\n    console.log(value);\n  }\n);\n复制代码\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"cors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cors","aria-hidden":"true"}},[this._v("#")]),this._v(" CORS")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("CORS需要浏览器和后端同时支持。IE 8 和 9 需要通过 "),e("code",[this._v("XDomainRequest")]),this._v(" 来实现。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("服务端设置 "),e("code",[this._v("Access-Control-Allow-Origin")]),this._v(" 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"document-domain"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#document-domain","aria-hidden":"true"}},[this._v("#")]),this._v(" document.domain")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("该方式只能用于二级域名相同的情况下，比如 "),e("code",[this._v("a.test.com")]),this._v(" 和 "),e("code",[this._v("b.test.com")]),this._v(" 适用于该方式。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("只需要给页面添加 "),e("code",[this._v("document.domain = 'test.com'")]),this._v(" 表示二级域名都相同就可以实现跨域")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"postmessage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#postmessage","aria-hidden":"true"}},[this._v("#")]),this._v(" postMessage")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("// 发送消息端\nwindow.parent.postMessage('message', 'http://test.com');\n// 接收消息端\nvar mc = new MessageChannel();\nmc.addEventListener('message', (event) => {\n    var origin = event.origin || event.originalEvent.origin; \n    if (origin === 'http://test.com') {\n        console.log('验证通过')\n    }\n});\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"什么是事件代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是事件代理","aria-hidden":"true"}},[this._v("#")]),this._v(" 什么是事件代理")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("<ul id=\"ul\">\n\t<li>1</li>\n    <li>2</li>\n\t<li>3</li>\n\t<li>4</li>\n\t<li>5</li>\n</ul>\n<script>\n\tlet ul = document.querySelector('#ul')\n\tul.addEventListener('click', (event) => {\n\t\tconsole.log(event.target);\n\t})\n<\/script>\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("节省内存")]),e("li",[this._v("不需要给子节点注销事件")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"service-worker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#service-worker","aria-hidden":"true"}},[this._v("#")]),this._v(" Service worker")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("Service workers 本质上充当Web应用程序与浏览器之间的代理服务器，也可以在网络可用时作为浏览器和网络间的代理。它们旨在（除其他之外）使得能够创建有效的离线体验，拦截网络请求并基于网络是否可用以及更新的资源是否驻留在服务器上来采取适当的动作。他们还允许访问推送通知和后台同步API。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('// index.js\nif (navigator.serviceWorker) {\n  navigator.serviceWorker\n    .register("sw.js")\n    .then(function(registration) {\n      console.log("service worker 注册成功");\n    })\n    .catch(function(err) {\n      console.log("servcie worker 注册失败");\n    });\n}\n// sw.js\n// 监听 `install` 事件，回调中缓存所需文件\nself.addEventListener("install", e => {\n  e.waitUntil(\n    caches.open("my-cache").then(function(cache) {\n      return cache.addAll(["./index.html", "./index.js"]);\n    })\n  );\n});\n\n// 拦截所有请求事件\n// 如果缓存中已经有请求的数据就直接用缓存，否则去请求数据\nself.addEventListener("fetch", e => {\n  e.respondWith(\n    caches.match(e.request).then(function(response) {\n      if (response) {\n        return response;\n      }\n      console.log("fetch source");\n    })\n  );\n});\n复制代码\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("打开页面，可以在开发者工具中的 "),e("code",[this._v("Application")]),this._v(" 看到 Service Worker 已经启动了")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"浏览器缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存","aria-hidden":"true"}},[this._v("#")]),this._v(" 浏览器缓存")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"强缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强缓存","aria-hidden":"true"}},[this._v("#")]),this._v(" 强缓存")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("实现强缓存可以通过两种响应头实现："),e("code",[this._v("Expires")]),this._v(" 和 "),e("code",[this._v("Cache-Control")]),this._v(" 。强缓存表示在缓存期间不需要请求，"),e("code",[this._v("state code")]),this._v(" 为 200")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("Expires: Wed, 22 Oct 2018 08:41:00 GMT\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("Expires")]),this._v(" 是 HTTP / 1.0 的产物，表示资源会在 "),e("code",[this._v("Wed, 22 Oct 2018 08:41:00 GMT")]),this._v(" 后过期，需要再次请求。并且 "),e("code",[this._v("Expires")]),this._v(" 受限于本地时间，如果修改了本地时间，可能会造成缓存失效。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("Cache-control: max-age=30\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("Cache-Control")]),this._v(" 出现于 HTTP / 1.1，优先级高于 "),e("code",[this._v("Expires")]),this._v(" 。该属性表示资源会在 30 秒后过期，需要再次请求。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"协商缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存","aria-hidden":"true"}},[this._v("#")]),this._v(" 协商缓存")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"last-modified-和-if-modified-since"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-和-if-modified-since","aria-hidden":"true"}},[this._v("#")]),this._v(" Last-Modified 和 If-Modified-Since")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("Last-Modified")]),this._v(" 表示本地文件最后修改日期，"),e("code",[this._v("If-Modified-Since")]),this._v(" 会将 "),e("code",[this._v("Last-Modified")]),this._v(" 的值发送给服务器，询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("但是如果在本地打开缓存文件，就会造成 "),e("code",[this._v("Last-Modified")]),this._v(" 被修改，所以在 HTTP / 1.1 出现了 "),e("code",[this._v("ETag")]),this._v(" 。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"etag-和-if-none-match"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#etag-和-if-none-match","aria-hidden":"true"}},[this._v("#")]),this._v(" ETag 和 If-None-Match")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("code",[t._v("ETag")]),t._v(" 类似于文件指纹，"),n("code",[t._v("If-None-Match")]),t._v(" 会将当前 "),n("code",[t._v("ETag")]),t._v(" 发送给服务器，询问该资源 "),n("code",[t._v("ETag")]),t._v(" 是否变动，有变动的话就将新的资源发送回来。并且 "),n("code",[t._v("ETag")]),t._v(" 优先级比 "),n("code",[t._v("Last-Modified")]),t._v(" 高。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"选择合适的缓存策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#选择合适的缓存策略","aria-hidden":"true"}},[this._v("#")]),this._v(" 选择合适的缓存策略")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[t._v("对于某些不需要缓存的资源，可以使用 "),n("code",[t._v("Cache-control: no-store")]),t._v(" ，表示该资源不需要缓存")]),n("li",[t._v("对于频繁变动的资源，可以使用 "),n("code",[t._v("Cache-Control: no-cache")]),t._v(" 并配合 "),n("code",[t._v("ETag")]),t._v(" 使用，表示该资源已被缓存，但是每次都会发送请求询问资源是否更新。")]),n("li",[t._v("对于代码文件来说，通常使用 "),n("code",[t._v("Cache-Control: max-age=31536000")]),t._v(" 并配合策略缓存使用，然后对文件进行指纹处理，一旦文件名变动就会立刻下载新的文件。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"浏览器性能问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器性能问题","aria-hidden":"true"}},[this._v("#")]),this._v(" 浏览器性能问题")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"重绘（repaint）和回流（reflow）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重绘（repaint）和回流（reflow）","aria-hidden":"true"}},[this._v("#")]),this._v(" 重绘（Repaint）和回流（Reflow）")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("重绘是当节点需要更改外观而不会影响布局的，比如改变 "),e("code",[this._v("color")]),this._v(" 就叫称为重绘")]),e("li",[this._v("回流是布局或者几何属性需要改变就称为回流。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("改变 window 大小")]),e("li",[this._v("改变字体")]),e("li",[this._v("添加或删除样式")]),e("li",[this._v("文字改变")]),e("li",[this._v("定位或者浮动")]),e("li",[this._v("盒模型")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ol",[n("li",[t._v("当 Event loop 执行完 Microtasks 后，会判断 document 是否需要更新。因为浏览器是 60Hz 的刷新率，每 16ms 才会更新一次。")]),n("li",[t._v("然后判断是否有 "),n("code",[t._v("resize")]),t._v(" 或者 "),n("code",[t._v("scroll")]),t._v(" ，有的话会去触发事件，所以 "),n("code",[t._v("resize")]),t._v(" 和 "),n("code",[t._v("scroll")]),t._v(" 事件也是至少 16ms 才会触发一次，并且自带节流功能。")]),n("li",[t._v("判断是否触发了 media query")]),n("li",[t._v("更新动画并且发送事件")]),n("li",[t._v("判断是否有全屏操作事件")]),n("li",[t._v("执行 "),n("code",[t._v("requestAnimationFrame")]),t._v(" 回调")]),n("li",[t._v("执行 "),n("code",[t._v("IntersectionObserver")]),t._v(" 回调，该方法用于判断元素是否可见，可以用于懒加载上，但是兼容性不好")]),n("li",[t._v("更新界面")]),n("li",[t._v("以上就是一帧中可能会做的事情。如果在一帧中有空闲时间，就会去执行 "),n("code",[t._v("requestIdleCallback")]),t._v(" 回调。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"减少重绘和回流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#减少重绘和回流","aria-hidden":"true"}},[this._v("#")]),this._v(" 减少重绘和回流")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("使用 "),e("code",[this._v("translate")]),this._v(" 替代 "),e("code",[this._v("top")])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("<div class=\"test\"></div>\n<style>\n\t.test {\n\t\tposition: absolute;\n\t\ttop: 10px;\n\t\twidth: 100px;\n\t\theight: 100px;\n\t\tbackground: red;\n\t}\n</style>\n<script>\n\tsetTimeout(() => {\n        // 引起回流\n\t\tdocument.querySelector('.test').style.top = '100px'\n\t}, 1000)\n<\/script>\n复制代码\n")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("使用 "),e("code",[this._v("visibility")]),this._v(" 替换 "),e("code",[this._v("display: none")]),this._v(" ，因为前者只会引起重绘，后者会引发回流（改变了布局）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("把 DOM 离线后修改，比如：先把 DOM 给 "),e("code",[this._v("display:none")]),this._v(" (有一次 Reflow)，然后你修改100次，然后再把它显示出来")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("不要把 DOM 结点的属性值放在一个循环里当成循环里的变量")]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("for(let i = 0; i < 1000; i++) {\n    // 获取 offsetTop 会导致回流，因为需要去获取正确的值\n    console.log(document.querySelector('.test').style.offsetTop)\n}\n复制代码\n")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("动画实现的速度的选择，动画速度越快，回流次数越多，也可以选择使用 "),e("code",[this._v("requestAnimationFrame")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("CSS 选择符从右往左匹配查找，避免 DOM 深度过深")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("将频繁运行的动画变为图层，图层能够阻止该节点回流影响别的元素。比如对于 "),e("code",[this._v("video")]),this._v(" 标签，浏览器会自动将该节点变为图层。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"图片优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#图片优化","aria-hidden":"true"}},[this._v("#")]),this._v(" 图片优化")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"计算图片大小"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#计算图片大小","aria-hidden":"true"}},[this._v("#")]),this._v(" 计算图片大小")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("减少像素点")]),e("li",[this._v("减少每个像素点能够显示的颜色")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"图片加载优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#图片加载优化","aria-hidden":"true"}},[this._v("#")]),this._v(" 图片加载优化")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ol",[n("li",[t._v("不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片完全可以用 CSS 去代替。")]),n("li",[t._v("对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪费带宽。一般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然后去请求相应裁剪好的图片。")]),n("li",[t._v("小图使用 base64 格式")]),n("li",[t._v("将多个图标文件整合到一张图片中（雪碧图）")]),n("li",[t._v("选择正确的图片格式：\n"),n("ul",[n("li",[t._v("对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP 格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好")]),n("li",[t._v("小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替")]),n("li",[t._v("照片使用 JPEG")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"其他文件优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他文件优化","aria-hidden":"true"}},[this._v("#")]),this._v(" 其他文件优化")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[t._v("CSS 文件放在 "),n("code",[t._v("head")]),t._v(" 中")]),n("li",[t._v("服务端开启文件压缩功能")]),n("li",[t._v("将 "),n("code",[t._v("script")]),t._v(" 标签放在 "),n("code",[t._v("body")]),t._v(" 底部，因为 JS 文件执行会阻塞渲染。当然也可以把 "),n("code",[t._v("script")]),t._v(" 标签放在任意位置然后加上 "),n("code",[t._v("defer")]),t._v(" ，表示该文件会并行下载，但是会放到 HTML 解析完成后顺序执行。对于没有任何依赖的 JS 文件可以加上 "),n("code",[t._v("async")]),t._v(" ，表示加载和渲染后续文档元素的过程将和  JS 文件的加载与执行并行无序进行。")]),n("li",[t._v("执行 JS 代码过长会卡住渲染，对于需要很多时间计算的代码可以考虑使用 "),n("code",[t._v("Webworker")]),t._v("。"),n("code",[t._v("Webworker")]),t._v(" 可以让我们另开一个线程执行脚本而不影响渲染。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"cdn"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cdn","aria-hidden":"true"}},[this._v("#")]),this._v(" CDN")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"使用-webpack-优化项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-webpack-优化项目","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用 Webpack 优化项目")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("对于 Webpack4，打包项目使用 production 模式，这样会自动开启代码压缩")]),e("li",[this._v("使用 ES6 模块来开启 tree shaking，这个技术可以移除没有使用的代码")]),e("li",[this._v("优化图片，对于小图可以使用 base64 的方式写入文件中")]),e("li",[this._v("按照路由拆分代码，实现按需加载")]),e("li",[this._v("给打包出来的文件名添加哈希，实现浏览器缓存文件")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"webpack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack","aria-hidden":"true"}},[this._v("#")]),this._v(" Webpack")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"优化打包速度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化打包速度","aria-hidden":"true"}},[this._v("#")]),this._v(" 优化打包速度")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("减少文件搜索范围\n"),e("ul",[e("li",[this._v("比如通过别名")]),e("li",[this._v("loader 的 test，include & exclude")])])]),e("li",[this._v("Webpack4 默认压缩并行")]),e("li",[this._v("Happypack 并发调用")]),e("li",[this._v("babel 也可以缓存编译")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"babel-原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#babel-原理","aria-hidden":"true"}},[this._v("#")]),this._v(" Babel 原理")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("分为三步：词法分析生成 Token，语法分析生成 AST，遍历 AST，根据插件变换相应的节点，最后把 AST 转换为代码")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"如何实现一个插件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何实现一个插件","aria-hidden":"true"}},[this._v("#")]),this._v(" 如何实现一个插件")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("调用插件 apply 函数传入 compiler 对象")]),e("li",[this._v("通过 compiler 对象监听事件")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("class BuildEndPlugin {\n  apply (compiler) {\n    const afterEmit = (compilation, cb) => {\n      cb()\n      setTimeout(function () {\n        process.exit(0)\n      }, 1000)\n    }\n\n    compiler.plugin('after-emit', afterEmit)\n  }\n}\n\nmodule.exports = BuildEndPlugin\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"框架"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#框架","aria-hidden":"true"}},[this._v("#")]),this._v(" 框架")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"react-生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-生命周期","aria-hidden":"true"}},[this._v("#")]),this._v(" React 生命周期")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在之前的版本中，如果你拥有一个很复杂的复合组件，然后改动了最上层组件的 "),e("code",[this._v("state")]),this._v("，那么调用栈可能会很长")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("对于异步渲染，现在渲染有两个阶段："),e("code",[this._v("reconciliation")]),this._v(" 和 "),e("code",[this._v("commit")]),this._v(" 。前者过程是可以打断的，后者不能暂停，会一直更新界面直到完成。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("Reconciliation")]),this._v(" 阶段")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("code",[this._v("componentWillMount")])]),e("li",[e("code",[this._v("componentWillReceiveProps")])]),e("li",[e("code",[this._v("shouldComponentUpdate")])]),e("li",[e("code",[this._v("componentWillUpdate")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("Commit")]),this._v(" 阶段")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("code",[this._v("componentDidMount")])]),e("li",[e("code",[this._v("componentDidUpdate")])]),e("li",[e("code",[this._v("componentWillUnmount")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("因为 "),n("code",[t._v("reconciliation")]),t._v(" 阶段是可以被打断的，所以 "),n("code",[t._v("reconciliation")]),t._v(" 阶段会执行的生命周期函数就可能会出现调用多次的情况，从而引起 Bug。所以对于 "),n("code",[t._v("reconciliation")]),t._v(" 阶段调用的几个函数，除了 "),n("code",[t._v("shouldComponentUpdate")]),t._v(" 以外，其他都应该避免去使用，并且 V16 中也引入了新的 API 来解决这个问题。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("getDerivedStateFromProps")]),this._v(" 用于替换 "),e("code",[this._v("componentWillReceiveProps")]),this._v(" ，该函数会在初始化和 "),e("code",[this._v("update")]),this._v(" 时被调用")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("class ExampleComponent extends React.Component {\n  // Initialize state in constructor,\n  // Or with a property initializer.\n  state = {};\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (prevState.someMirroredValue !== nextProps.someValue) {\n      return {\n        derivedData: computeDerivedState(nextProps),\n        someMirroredValue: nextProps.someValue\n      };\n    }\n\n    // Return null to indicate no change to state.\n    return null;\n  }\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("getSnapshotBeforeUpdate")]),this._v(" 用于替换 "),e("code",[this._v("componentWillUpdate")]),this._v(" ，该函数会在 "),e("code",[this._v("update")]),this._v(" 后 DOM 更新前被调用，用于读取最新的 DOM 数据。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"v16-生命周期函数用法建议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v16-生命周期函数用法建议","aria-hidden":"true"}},[this._v("#")]),this._v(" V16 生命周期函数用法建议")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("class ExampleComponent extends React.Component {\n  // 用于初始化 state\n  constructor() {}\n  // 用于替换 `componentWillReceiveProps` ，该函数会在初始化和 `update` 时被调用\n  // 因为该函数是静态函数，所以取不到 `this`\n  // 如果需要对比 `prevProps` 需要单独在 `state` 中维护\n  static getDerivedStateFromProps(nextProps, prevState) {}\n  // 判断是否需要更新组件，多用于组件性能优化\n  shouldComponentUpdate(nextProps, nextState) {}\n  // 组件挂载后调用\n  // 可以在该函数中进行请求或者订阅\n  componentDidMount() {}\n  // 用于获得最新的 DOM 数据\n  getSnapshotBeforeUpdate() {}\n  // 组件即将销毁\n  // 可以在此处移除订阅，定时器等等\n  componentWillUnmount() {}\n  // 组件销毁后调用\n  componentDidUnMount() {}\n  // 组件更新后调用\n  componentDidUpdate() {}\n  // 渲染组件函数\n  render() {}\n  // 以下函数不建议使用\n  UNSAFE_componentWillMount() {}\n  UNSAFE_componentWillUpdate(nextProps, nextState) {}\n  UNSAFE_componentWillReceiveProps(nextProps) {}\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"setstate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setstate","aria-hidden":"true"}},[this._v("#")]),this._v(" setState")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("setState")]),this._v(" 在 React 中是经常使用的一个 API，但是它存在一些问题，可能会导致犯错，核心原因就是因为这个 API 是异步的。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("首先 "),e("code",[this._v("setState")]),this._v(" 的调用并不会马上引起 "),e("code",[this._v("state")]),this._v(" 的改变，并且如果你一次调用了多个 "),e("code",[this._v("setState")]),this._v(" ，那么结果可能并不如你期待的一样。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("handle() {\n  // 初始化 `count` 为 0\n  console.log(this.state.count) // -> 0\n  this.setState({ count: this.state.count + 1 })\n  this.setState({ count: this.state.count + 1 })\n  this.setState({ count: this.state.count + 1 })\n  console.log(this.state.count) // -> 0\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("第一，两次的打印都为 0，因为 "),e("code",[this._v("setState")]),this._v(" 是个异步 API，只有同步代码运行完毕才会执行。"),e("code",[this._v("setState")]),this._v(" 异步的原因我认为在于，"),e("code",[this._v("setState")]),this._v(" 可能会导致 DOM 的重绘，如果调用一次就马上去进行重绘，那么调用多次就会造成不必要的性能损失。设计成异步的话，就可以将多次调用放入一个队列中，在恰当的时候统一进行更新过程。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("第二，虽然调用了三次 "),e("code",[this._v("setState")]),this._v(" ，但是 "),e("code",[this._v("count")]),this._v(" 的值还是为 1。因为多次调用会合并为一次，只有当更新结束后 "),e("code",[this._v("state")]),this._v(" 才会改变，三次调用等同于如下代码")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("Object.assign(  \n  {},\n  { count: this.state.count + 1 },\n  { count: this.state.count + 1 },\n  { count: this.state.count + 1 },\n)\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("当然你也可以通过以下方式来实现调用三次 "),e("code",[this._v("setState")]),this._v(" 使得 "),e("code",[this._v("count")]),this._v(" 为 3")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("handle() {\n  this.setState((prevState) => ({ count: prevState.count + 1 }))\n  this.setState((prevState) => ({ count: prevState.count + 1 }))\n  this.setState((prevState) => ({ count: prevState.count + 1 }))\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果你想在每次调用 "),e("code",[this._v("setState")]),this._v(" 后获得正确的 "),e("code",[this._v("state")]),this._v(" ，可以通过如下代码实现")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("handle() {\n    this.setState((prevState) => ({ count: prevState.count + 1 }), () => {\n        console.log(this.state)\n    })\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"vue的-nexttick-原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue的-nexttick-原理","aria-hidden":"true"}},[this._v("#")]),this._v(" Vue的 nextTick 原理")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("nextTick")]),this._v(" 可以让我们在下次 DOM 更新循环结束之后执行延迟回调，用于获得更新后的 DOM。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("对于实现 macrotasks ，会先判断是否能使用 "),e("code",[this._v("setImmediate")]),this._v(" ，不能的话降级为 "),e("code",[this._v("MessageChannel")]),this._v(" ，以上都不行的话就使用 "),e("code",[this._v("setTimeout")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  macroTimerFunc = () => {\n    setImmediate(flushCallbacks)\n  }\n} else if (\n  typeof MessageChannel !== 'undefined' &&\n  (isNative(MessageChannel) ||\n    // PhantomJS\n    MessageChannel.toString() === '[object MessageChannelConstructor]')\n) {\n  const channel = new MessageChannel()\n  const port = channel.port2\n  channel.port1.onmessage = flushCallbacks\n  macroTimerFunc = () => {\n    port.postMessage(1)\n  }\n} else {\n  /* istanbul ignore next */\n  macroTimerFunc = () => {\n    setTimeout(flushCallbacks, 0)\n  }\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("nextTick")]),this._v(" 同时也支持 Promise 的使用，会判断是否实现了 Promise")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("export function nextTick(cb?: Function, ctx?: Object) {\n  let _resolve\n  // 将回调函数整合进一个数组中\n  callbacks.push(() => {\n    if (cb) {\n      try {\n        cb.call(ctx)\n      } catch (e) {\n        handleError(e, ctx, 'nextTick')\n      }\n    } else if (_resolve) {\n      _resolve(ctx)\n    }\n  })\n  if (!pending) {\n    pending = true\n    if (useMacroTask) {\n      macroTimerFunc()\n    } else {\n      microTimerFunc()\n    }\n  }\n  // 判断是否可以使用 Promise \n  // 可以的话给 _resolve 赋值\n  // 这样回调函数就能以 promise 的方式调用\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(resolve => {\n      _resolve = resolve\n    })\n  }\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"vue-生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-生命周期","aria-hidden":"true"}},[this._v("#")]),this._v(" Vue 生命周期")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在初始化时，会调用以下代码，生命周期就是通过 "),e("code",[this._v("callHook")]),this._v(" 调用的")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("Vue.prototype._init = function(options) {\n    initLifecycle(vm)\n    initEvents(vm)\n    initRender(vm)\n    callHook(vm, 'beforeCreate') // 拿不到 props data\n    initInjections(vm) \n    initState(vm)\n    initProvide(vm)\n    callHook(vm, 'created')\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("可以发现在以上代码中，"),e("code",[this._v("beforeCreate")]),this._v(" 调用的时候，是获取不到 props 或者 data 中的数据的，因为这些数据的初始化都在 "),e("code",[this._v("initState")]),this._v(" 中。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("export function mountComponent {\n    callHook(vm, 'beforeMount')\n    // ...\n    if (vm.$vnode == null) {\n        vm._isMounted = true\n        callHook(vm, 'mounted')\n    }\n}\n复制代码\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("code",[t._v("beforeMount")]),t._v(" 就是在挂载前执行的，然后开始创建 VDOM 并替换成真实 DOM，最后执行 "),n("code",[t._v("mounted")]),t._v(" 钩子。这里会有个判断逻辑，如果是外部 "),n("code",[t._v("new Vue({})")]),t._v(" 的话，不会存在 "),n("code",[t._v("$vnode")]),t._v(" ，所以直接执行 "),n("code",[t._v("mounted")]),t._v(" 钩子了。如果有子组件的话，会递归挂载子组件，只有当所有子组件全部挂载完毕，才会执行根组件的挂载钩子。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function flushSchedulerQueue() {\n  // ...\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index]\n    if (watcher.before) {\n      watcher.before() // 调用 beforeUpdate\n    }\n    id = watcher.id\n    has[id] = null\n    watcher.run()\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' +\n            (watcher.user\n              ? `in watcher with expression \"${watcher.expression}\"`\n              : `in a component render function.`),\n          watcher.vm\n        )\n        break\n      }\n    }\n  }\n  callUpdatedHooks(updatedQueue)\n}\n\nfunction callUpdatedHooks(queue) {\n  let i = queue.length\n  while (i--) {\n    const watcher = queue[i]\n    const vm = watcher.vm\n    if (vm._watcher === watcher && vm._isMounted) {\n      callHook(vm, 'updated')\n    }\n  }\n}\n复制代码\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("上图还有两个生命周期没有说，分别为 "),n("code",[t._v("activated")]),t._v(" 和 "),n("code",[t._v("deactivated")]),t._v(" ，这两个钩子函数是 "),n("code",[t._v("keep-alive")]),t._v(" 组件独有的。用 "),n("code",[t._v("keep-alive")]),t._v(" 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 "),n("code",[t._v("deactivated")]),t._v(" 钩子函数，命中缓存渲染后会执行 "),n("code",[t._v("actived")]),t._v(" 钩子函数。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("Vue.prototype.$destroy = function() {\n  // ...\n  callHook(vm, 'beforeDestroy')\n  vm._isBeingDestroyed = true\n  // remove self from parent\n  const parent = vm.$parent\n  if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n    remove(parent.$children, vm)\n  }\n  // teardown watchers\n  if (vm._watcher) {\n    vm._watcher.teardown()\n  }\n  let i = vm._watchers.length\n  while (i--) {\n    vm._watchers[i].teardown()\n  }\n  // remove reference from data ob\n  // frozen object may not have observer.\n  if (vm._data.__ob__) {\n    vm._data.__ob__.vmCount--\n  }\n  // call the last hook...\n  vm._isDestroyed = true\n  // invoke destroy hooks on current rendered tree\n  vm.__patch__(vm._vnode, null)\n  // fire destroyed hook\n  callHook(vm, 'destroyed')\n  // turn off all instance listeners.\n  vm.$off()\n  // remove __vue__ reference\n  if (vm.$el) {\n    vm.$el.__vue__ = null\n  }\n  // release circular reference (#6759)\n  if (vm.$vnode) {\n    vm.$vnode.parent = null\n  }\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在执行销毁操作前会调用 "),e("code",[this._v("beforeDestroy")]),this._v(" 钩子函数，然后进行一系列的销毁操作，如果有子组件的话，也会递归销毁子组件，所有子组件都销毁完毕后才会执行根组件的 "),e("code",[this._v("destroyed")]),this._v(" 钩子函数。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"vue-双向绑定"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-双向绑定","aria-hidden":"true"}},[this._v("#")]),this._v(" Vue 双向绑定")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("在初始化 data props 时，递归对象，给每一个属性双向绑定，对于数组而言，会拿到原型重写函数，实现手动派发更新。因为函数不能监听到数据的变动，和 proxy 比较一下。")]),e("li",[this._v("除了以上数组函数，通过索引改变数组数据或者给对象添加新属性也不能触发，需要使用自带的set 函数，这个函数内部也是手动派发更新")]),e("li",[this._v("在组件挂载时，会实例化渲染观察者，传入组件更新的回调。在实例化过程中，会对模板中的值对象进行求值，触发依赖收集。在触发依赖之前，会保存当前的渲染观察者，用于组件含有子组件的时候，恢复父组件的观察者。触发依赖收集后，会清理掉不需要的依赖，性能优化，防止不需要的地方去重复渲染。")]),e("li",[this._v("改变值会触发依赖更新，会将收集到的所有依赖全部拿出来，放入 nextTick 中统一执行。执行过程中，会先对观察者进行排序，渲染的最后执行。先执行 beforeupdate 钩子函数，然后执行观察者的回调。在执行回调的过程中，可能 watch 会再次 push 进来，因为存在在回调中再次赋值，判断无限循环。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"v-model原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-model原理","aria-hidden":"true"}},[this._v("#")]),this._v(" v-model原理")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("v:model 在模板编译的时候转换代码")]),e("li",[this._v("v-model 本质是 :value 和 v-on，但是略微有点区别。在输入控件下，有两个事件监听，输入中文时只有当输出中文才触发数据赋值")]),e("li",[this._v("v-model 和:bind 同时使用，前者优先级更高，如果 :value 会出现冲突")]),e("li",[this._v("v-model 因为语法糖的原因，还可以用于父子通信")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"watch-和-computed-的区别和运用的场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#watch-和-computed-的区别和运用的场景","aria-hidden":"true"}},[this._v("#")]),this._v(" watch 和 computed 的区别和运用的场景")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("前者是计算属性，依赖其他属性计算值。并且 computer 的值有缓存，只有当计算值变化才变化触发渲染。后者监听到值得变化就会执行回调")]),e("li",[this._v("computer 就是简单计算一下，适用于渲染页面。watch 适合做一些复杂业务逻辑")]),e("li",[this._v("前者有依赖两个 watcher，computer watcher 和渲染 watcher。判断计算出的值变化后渲染 watcher 派发更新触发渲染")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"vue-的父子通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-的父子通信","aria-hidden":"true"}},[this._v("#")]),this._v(" Vue 的父子通信")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[t._v("使用 "),n("code",[t._v("v-model")]),t._v(" 实现父传子，子传父。因为 v-model 默认解析成 :value 和 :input")]),n("li",[t._v("父传子\n"),n("ul",[n("li",[t._v("通过 "),n("code",[t._v("props")])]),n("li",[t._v("通过 "),n("code",[t._v("$children")]),t._v(" 访问子组件数组，注意该数组乱序")]),n("li",[t._v("对于多级父传子，可以使用 "),n("code",[t._v("v-bind={$attrs}")]),t._v(" ，通过对象的方式筛选出父组件中传入但子组件不需要的 props")]),n("li",[t._v("$listens 包含了父作用域中的 (不含 "),n("code",[t._v(".native")]),t._v(" 修饰器的) "),n("code",[t._v("v-on")]),t._v(" 事件监听器。")])])]),n("li",[t._v("子传父\n"),n("ul",[n("li",[t._v("父组件传递函数给子组件，子组件通过 "),n("code",[t._v("$emit")]),t._v(" 触发")]),n("li",[t._v("修改父组件的 "),n("code",[t._v("props")])]),n("li",[t._v("通过 "),n("code",[t._v("$parent")]),t._v(" 访问父组件")]),n("li",[t._v(".sync")])])]),n("li",[t._v("平行组件\n"),n("ul",[n("li",[t._v("EventBus")])])]),n("li",[t._v("Vuex 解决一切")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"路由原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#路由原理","aria-hidden":"true"}},[this._v("#")]),this._v(" 路由原理")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("hash 模式")]),e("li",[this._v("history 模式")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("www.test.com/#/")]),this._v(" 就是 Hash URL，当 "),e("code",[this._v("#")]),this._v(" 后面的哈希值发生变化时，不会向服务器请求数据，可以通过 "),e("code",[this._v("hashchange")]),this._v(" 事件来监听到 URL 的变化，从而进行跳转页面。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/7/11/164888109d57995f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/7/11/164888478584a217?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"mvvm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvvm","aria-hidden":"true"}},[this._v("#")]),this._v(" MVVM")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("View：界面")]),e("li",[this._v("Model：数据模型")]),e("li",[this._v("ViewModel：作为桥梁负责沟通 View 和 Model")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"脏数据检测"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#脏数据检测","aria-hidden":"true"}},[this._v("#")]),this._v(" 脏数据检测")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("当触发了指定事件后会进入脏数据检测，这时会调用 "),e("code",[this._v("$digest")]),this._v(" 循环遍历所有的数据观察者，判断当前值是否和先前的值有区别，如果检测到变化的话，会调用 "),e("code",[this._v("$watch")]),this._v(" 函数，然后再次调用 "),e("code",[this._v("$digest")]),this._v(" 循环直到发现没有变化。循环至少为二次 ，至多为十次。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"数据劫持"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据劫持","aria-hidden":"true"}},[this._v("#")]),this._v(" 数据劫持")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Vue 内部使用了 "),e("code",[this._v("Object.defineProperty()")]),this._v(" 来实现双向绑定，通过这个函数可以监听到 "),e("code",[this._v("set")]),this._v(" 和 "),e("code",[this._v("get")]),this._v(" 的事件。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("var data = { name: 'yck' }\nobserve(data)\nlet name = data.name // -> get value\ndata.name = 'yyy' // -> change value\n\nfunction observe(obj) {\n  // 判断类型\n  if (!obj || typeof obj !== 'object') {\n    return\n  }\n  Object.keys(obj).forEach(key => {\n    defineReactive(obj, key, obj[key])\n  })\n}\n\nfunction defineReactive(obj, key, val) {\n  // 递归子属性\n  observe(val)\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter() {\n      console.log('get value')\n      return val\n    },\n    set: function reactiveSetter(newVal) {\n      console.log('change value')\n      val = newVal\n    }\n  })\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("以上代码简单的实现了如何监听数据的 "),e("code",[this._v("set")]),this._v(" 和 "),e("code",[this._v("get")]),this._v(" 的事件，但是仅仅如此是不够的，还需要在适当的时候给属性添加发布订阅")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("<div>\n    {{name}}\n</div>\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("// 通过 Dep 解耦\nclass Dep {\n  constructor() {\n    this.subs = []\n  }\n  addSub(sub) {\n    // sub 是 Watcher 实例\n    this.subs.push(sub)\n  }\n  notify() {\n    this.subs.forEach(sub => {\n      sub.update()\n    })\n  }\n}\n// 全局属性，通过该属性配置 Watcher\nDep.target = null\n\nfunction update(value) {\n  document.querySelector('div').innerText = value\n}\n\nclass Watcher {\n  constructor(obj, key, cb) {\n    // 将 Dep.target 指向自己\n    // 然后触发属性的 getter 添加监听\n    // 最后将 Dep.target 置空\n    Dep.target = this\n    this.cb = cb\n    this.obj = obj\n    this.key = key\n    this.value = obj[key]\n    Dep.target = null\n  }\n  update() {\n    // 获得新值\n    this.value = this.obj[this.key]\n    // 调用 update 方法更新 Dom\n    this.cb(this.value)\n  }\n}\nvar data = { name: 'yck' }\nobserve(data)\n// 模拟解析到 `{{name}}` 触发的操作\nnew Watcher(data, 'name', update)\n// update Dom innerText\ndata.name = 'yyy' \n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("接下来,对 "),e("code",[this._v("defineReactive")]),this._v(" 函数进行改造")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function defineReactive(obj, key, val) {\n  // 递归子属性\n  observe(val)\n  let dp = new Dep()\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter() {\n      console.log('get value')\n      // 将 Watcher 添加到订阅\n      if (Dep.target) {\n        dp.addSub(Dep.target)\n      }\n      return val\n    },\n    set: function reactiveSetter(newVal) {\n      console.log('change value')\n      val = newVal\n      // 执行 watcher 的 update 方法\n      dp.notify()\n    }\n  })\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"proxy-与-object-defineproperty-对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#proxy-与-object-defineproperty-对比","aria-hidden":"true"}},[this._v("#")]),this._v(" Proxy 与 Object.defineProperty 对比")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("Object.defineProperty")]),this._v(" 虽然已经能够实现双向绑定了，但是他还是有缺陷的。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("只能对属性进行数据劫持，所以需要深度遍历整个对象")]),e("li",[this._v("对于数组不能监听到数据的变化")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("const arrayProto = Array.prototype\nexport const arrayMethods = Object.create(arrayProto)\n// hack 以下几个函数\nconst methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\nmethodsToPatch.forEach(function (method) {\n  // 获得原生函数\n  const original = arrayProto[method]\n  def(arrayMethods, method, function mutator (...args) {\n    // 调用原生函数\n    const result = original.apply(this, args)\n    const ob = this.__ob__\n    let inserted\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args\n        break\n      case 'splice':\n        inserted = args.slice(2)\n        break\n    }\n    if (inserted) ob.observeArray(inserted)\n    // 触发更新\n    ob.dep.notify()\n    return result\n  })\n})\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("let onWatch = (obj, setBind, getLogger) => {\n  let handler = {\n    get(target, property, receiver) {\n      getLogger(target, property)\n      return Reflect.get(target, property, receiver);\n    },\n    set(target, property, value, receiver) {\n      setBind(value);\n      return Reflect.set(target, property, value);\n    }\n  };\n  return new Proxy(obj, handler);\n};\n\nlet obj = { a: 1 }\nlet value\nlet p = onWatch(obj, (v) => {\n  value = v\n}, (target, property) => {\n  console.log(`Get '${property}' = ${target[property]}`);\n})\np.a = 2 // bind `value` to `2`\np.a // -> Get 'a' = 2\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"虚拟-dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#虚拟-dom","aria-hidden":"true"}},[this._v("#")]),this._v(" 虚拟 DOM")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"路由鉴权"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#路由鉴权","aria-hidden":"true"}},[this._v("#")]),this._v(" 路由鉴权")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("登录页和其他页面分开，登录以后实例化 Vue 并且初始化需要的路由")]),e("li",[this._v("动态路由，通过 addRoute 实现")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"vue-和-react-区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-和-react-区别","aria-hidden":"true"}},[this._v("#")]),this._v(" Vue 和 React 区别")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("Vue 表单支持双向绑定开发更方便")]),e("li",[this._v("改变数据方式不同，setState 有使用坑")]),e("li",[this._v("props Vue 可变，React 不可变")]),e("li",[this._v("判断是否需要更新 React 可以通过钩子函数判断，Vue 使用依赖追踪，修改了什么才渲染什么")]),e("li",[this._v("React 16以后 有些钩子函数会执行多次")]),e("li",[this._v("React 需要使用 JSX，需要 Babel 编译。Vue 虽然可以使用模板，但是也可以通过直接编写 render 函数不需要编译就能运行。")]),e("li",[this._v("生态 React 相对较好")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"网络"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#网络","aria-hidden":"true"}},[this._v("#")]),this._v(" 网络")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"tcp-3次握手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp-3次握手","aria-hidden":"true"}},[this._v("#")]),this._v(" TCP 3次握手")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("第一次握手")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入  SYN-SENT 状态，"),e("code",[this._v("x")]),this._v(" 表示客户端的数据通信初始序号。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("第二次握手")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("第三次握手")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("你是否有疑惑明明两次握手就可以建立起连接，为什么还需要第三次应答？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"tcp-拥塞控制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp-拥塞控制","aria-hidden":"true"}},[this._v("#")]),this._v(" TCP 拥塞控制")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"慢开始算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#慢开始算法","aria-hidden":"true"}},[this._v("#")]),this._v(" 慢开始算法")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("连接初始设置拥塞窗口（Congestion Window） 为 1 MSS（一个分段的最大数据量）")]),e("li",[this._v("每过一个 RTT 就将窗口大小乘二")]),e("li",[this._v("指数级增长肯定不能没有限制的，所以有一个阈值限制，当窗口大小大于阈值时就会启动拥塞避免算法。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"拥塞避免算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#拥塞避免算法","aria-hidden":"true"}},[this._v("#")]),this._v(" 拥塞避免算法")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("将阈值设为当前拥塞窗口的一半")]),e("li",[this._v("将拥塞窗口设为 1 MSS")]),e("li",[this._v("启动拥塞避免算法")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"快速重传"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#快速重传","aria-hidden":"true"}},[this._v("#")]),this._v(" 快速重传")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("TCP Taho 实现如下")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("将阈值设为当前拥塞窗口的一半")]),e("li",[this._v("将拥塞窗口设为 1 MSS")]),e("li",[this._v("重新开始慢开始算法")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("TCP Reno 实现如下")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("拥塞窗口减半")]),e("li",[this._v("将阈值设为当前拥塞窗口")]),e("li",[this._v("进入快恢复阶段（重发对端需要的包，一旦收到一个新的 ACK 答复就退出该阶段）")]),e("li",[this._v("使用拥塞避免算法")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"tcp-new-ren-改进后的快恢复"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp-new-ren-改进后的快恢复","aria-hidden":"true"}},[this._v("#")]),this._v(" TCP New Ren 改进后的快恢复")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("TCP New Reno")]),this._v(" 算法改进了之前 "),e("strong",[this._v("TCP Reno")]),this._v(" 算法的缺陷。在之前，快恢复中只要收到一个新的 ACK 包，就会退出快恢复。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在 "),e("strong",[this._v("TCP New Reno")]),this._v(" 中，TCP 发送方先记下三个重复 ACK 的分段的最大序号。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"https-握手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#https-握手","aria-hidden":"true"}},[this._v("#")]),this._v(" HTTPS 握手")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"tls"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tls","aria-hidden":"true"}},[this._v("#")]),this._v(" TLS")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("对称加密")]),this._v("：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("非对称加密")]),this._v("：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("TLS 握手过程如下图：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("客户端发送一个随机值，需要的协议和加密方式")]),e("li",[this._v("服务端收到客户端的随机值，自己也产生一个随机值，并根据客户端需求的协议和加密方式来使用对应的方式，发送自己的证书（如果需要验证客户端证书需要说明）")]),e("li",[this._v("客户端收到服务端的证书并验证是否有效，验证通过会再生成一个随机值，通过服务端证书的公钥去加密这个随机值并发送给服务端，如果服务端需要验证客户端证书的话会附带证书")]),e("li",[this._v("服务端收到加密过的随机值并使用私钥解密获得第三个随机值，这时候两端都拥有了三个随机值，可以通过这三个随机值按照之前约定的加密方式生成密钥，接下来的通信就可以通过该密钥来加密解密")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"从输入-url-到页面加载全过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从输入-url-到页面加载全过程","aria-hidden":"true"}},[this._v("#")]),this._v(" 从输入 URL 到页面加载全过程")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ol",[n("li",[t._v("首先做 DNS 查询，如果这一步做了智能 DNS 解析的话，会提供访问速度最快的 IP 地址回来")]),n("li",[t._v("接下来是 TCP 握手，应用层会下发数据给传输层，这里 TCP 协议会指明两端的端口号，然后下发给网络层。网络层中的 IP 协议会确定 IP 地址，并且指示了数据传输中如何跳转路由器。然后包会再被封装到数据链路层的数据帧结构中，最后就是物理层面的传输了")]),n("li",[t._v("TCP 握手结束后会进行 TLS 握手，然后就开始正式的传输数据")]),n("li",[t._v("数据在进入服务端之前，可能还会先经过负责负载均衡的服务器，它的作用就是将请求合理的分发到多台服务器上，这时假设服务端会响应一个 HTML 文件")]),n("li",[t._v("首先浏览器会判断状态码是什么，如果是 200 那就继续解析，如果 400 或 500 的话就会报错，如果 300 的话会进行重定向，这里会有个重定向计数器，避免过多次的重定向，超过次数也会报错")]),n("li",[t._v("浏览器开始解析文件，如果是 gzip 格式的话会先解压一下，然后通过文件的编码格式知道该如何去解码文件")]),n("li",[t._v("文件解码成功后会正式开始渲染流程，先会根据 HTML 构建 DOM 树，有 CSS 的话会去构建 CSSOM 树。如果遇到 "),n("code",[t._v("script")]),t._v(" 标签的话，会判断是否存在 "),n("code",[t._v("async")]),t._v(" 或者 "),n("code",[t._v("defer")]),t._v(" ，前者会并行进行下载并执行 JS，后者会先下载文件，然后等待 HTML 解析完成后顺序执行，如果以上都没有，就会阻塞住渲染流程直到 JS 执行完毕。遇到文件下载的会去下载文件，这里如果使用 HTTP 2.0 协议的话会极大的提高多图的下载效率。")]),n("li",[t._v("初始的 HTML 被完全加载和解析后会触发 "),n("code",[t._v("DOMContentLoaded")]),t._v(" 事件")]),n("li",[t._v("CSSOM 树和 DOM 树构建完成后会开始生成 Render 树，这一步就是确定页面元素的布局、样式等等诸多方面的东西")]),n("li",[t._v("在生成 Render 树的过程中，浏览器就开始调用 GPU 绘制，合成图层，将内容显示在屏幕上了")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"http-常用返回码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-常用返回码","aria-hidden":"true"}},[this._v("#")]),this._v(" HTTP 常用返回码")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("2XX 成功")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("200 OK，表示从客户端发来的请求在服务器端被正确处理")]),e("li",[this._v("204 No content，表示请求成功，但响应报文不含实体的主体部分")]),e("li",[this._v("205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容")]),e("li",[this._v("206 Partial Content，进行范围请求")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("3XX 重定向")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("301 moved permanently，永久性重定向，表示资源已被分配了新的 URL")]),e("li",[this._v("302 found，临时性重定向，表示资源临时被分配了新的 URL")]),e("li",[this._v("303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源")]),e("li",[this._v("304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况")]),e("li",[this._v("307 temporary redirect，临时重定向，和302含义类似，但是期望客户端保持请求方法不变向新的地址发出请求")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("4XX 客户端错误")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("400 bad request，请求报文存在语法错误")]),e("li",[this._v("401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息")]),e("li",[this._v("403 forbidden，表示对请求资源的访问被服务器拒绝")]),e("li",[this._v("404 not found，表示在服务器上没有找到请求的资源")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("5XX 服务器错误")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("500 internal sever error，表示服务器端在执行请求时发生了错误")]),e("li",[this._v("501 Not Implemented，表示服务器不支持当前请求所需要的某个功能")]),e("li",[this._v("503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"数据结构算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据结构算法","aria-hidden":"true"}},[this._v("#")]),this._v(" 数据结构算法")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"常见排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常见排序","aria-hidden":"true"}},[this._v("#")]),this._v(" 常见排序")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function checkArray(array) {\n    if (!array || array.length <= 2) return\n}\nfunction swap(array, left, right) {\n    let rightValue = array[right]\n    array[right] = array[left]\n    array[left] = rightValue\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"冒泡排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序","aria-hidden":"true"}},[this._v("#")]),this._v(" 冒泡排序")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("冒泡排序的原理如下，从第一个元素开始，把当前元素和下一个索引元素进行比较。如果当前元素大，那么就交换位置，重复操作直到比较到最后一个元素，那么此时最后一个元素就是该数组中最大的数。下一轮重复以上操作，但是此时最后一个元素已经是最大数了，所以不需要再比较最后一个元素，只需要比较到 "),e("code",[this._v("length - 1")]),this._v(" 的位置。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function bubble(array) {\n  checkArray(array);\n  for (let i = array.length - 1; i > 0; i--) {\n    // 从 0 到 `length - 1` 遍历\n    for (let j = 0; j < i; j++) {\n      if (array[j] > array[j + 1]) swap(array, j, j + 1)\n    }\n  }\n  return array;\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("该算法的操作次数是一个等差数列 "),e("code",[this._v("n + (n - 1) + (n - 2) + 1")]),this._v(" ，去掉常数项以后得出时间复杂度是 O(n * n)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"插入排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#插入排序","aria-hidden":"true"}},[this._v("#")]),this._v(" 插入排序")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function insertion(array) {\n  checkArray(array);\n  for (let i = 1; i < array.length; i++) {\n    for (let j = i - 1; j >= 0 && array[j] > array[j + 1]; j--)\n      swap(array, j, j + 1);\n  }\n  return array;\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("该算法的操作次数是一个等差数列 "),e("code",[this._v("n + (n - 1) + (n - 2) + 1")]),this._v(" ，去掉常数项以后得出时间复杂度是 O(n * n)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"选择排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#选择排序","aria-hidden":"true"}},[this._v("#")]),this._v(" 选择排序")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function selection(array) {\n  checkArray(array);\n  for (let i = 0; i < array.length - 1; i++) {\n    let minIndex = i;\n    for (let j = i + 1; j < array.length; j++) {\n      minIndex = array[j] < array[minIndex] ? j : minIndex;\n    }\n    swap(array, i, minIndex);\n  }\n  return array;\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("该算法的操作次数是一个等差数列 "),e("code",[this._v("n + (n - 1) + (n - 2) + 1")]),this._v(" ，去掉常数项以后得出时间复杂度是 O(n * n)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"归并排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#归并排序","aria-hidden":"true"}},[this._v("#")]),this._v(" 归并排序")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("归并排序的原理如下。递归的将数组两两分开直到最多包含两个元素，然后将数组排序合并，最终合并为排序好的数组。假设我有一组数组 "),n("code",[t._v("[3, 1, 2, 8, 9, 7, 6]")]),t._v("，中间数索引是 3，先排序数组 "),n("code",[t._v("[3, 1, 2, 8]")]),t._v(" 。在这个左边数组上，继续拆分直到变成数组包含两个元素（如果数组长度是奇数的话，会有一个拆分数组只包含一个元素）。然后排序数组 "),n("code",[t._v("[3, 1]")]),t._v(" 和 "),n("code",[t._v("[2, 8]")]),t._v(" ，然后再排序数组 "),n("code",[t._v("[1, 3, 2, 8]")]),t._v(" ，这样左边数组就排序完成，然后按照以上思路排序右边数组，最后将数组 "),n("code",[t._v("[1, 2, 3, 8]")]),t._v(" 和 "),n("code",[t._v("[6, 7, 9]")]),t._v(" 排序。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function sort(array) {\n  checkArray(array);\n  mergeSort(array, 0, array.length - 1);\n  return array;\n}\n\nfunction mergeSort(array, left, right) {\n  // 左右索引相同说明已经只有一个数\n  if (left === right) return;\n  // 等同于 `left + (right - left) / 2`\n  // 相比 `(left + right) / 2` 来说更加安全，不会溢出\n  // 使用位运算是因为位运算比四则运算快\n  let mid = parseInt(left + ((right - left) >> 1));\n  mergeSort(array, left, mid);\n  mergeSort(array, mid + 1, right);\n\n  let help = [];\n  let i = 0;\n  let p1 = left;\n  let p2 = mid + 1;\n  while (p1 <= mid && p2 <= right) {\n    help[i++] = array[p1] < array[p2] ? array[p1++] : array[p2++];\n  }\n  while (p1 <= mid) {\n    help[i++] = array[p1++];\n  }\n  while (p2 <= right) {\n    help[i++] = array[p2++];\n  }\n  for (let i = 0; i < help.length; i++) {\n    array[left + i] = help[i];\n  }\n  return array;\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("mergeSort(data, 0, 6) // mid = 3\n  mergeSort(data, 0, 3) // mid = 1\n    mergeSort(data, 0, 1) // mid = 0\n      mergeSort(data, 0, 0) // 遇到终止，回退到上一步\n    mergeSort(data, 1, 1) // 遇到终止，回退到上一步\n    // 排序 p1 = 0, p2 = mid + 1 = 1\n    // 回退到 `mergeSort(data, 0, 3)` 执行下一个递归\n  mergeSort(2, 3) // mid = 2\n    mergeSort(3, 3) // 遇到终止，回退到上一步\n  // 排序 p1 = 2, p2 = mid + 1 = 3\n  // 回退到 `mergeSort(data, 0, 3)` 执行合并逻辑\n  // 排序 p1 = 0, p2 = mid + 1 = 2\n  // 执行完毕回退\n  // 左边数组排序完毕，右边也是如上轨迹\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"快排"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#快排","aria-hidden":"true"}},[this._v("#")]),this._v(" 快排")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function sort(array) {\n  checkArray(array);\n  quickSort(array, 0, array.length - 1);\n  return array;\n}\n\nfunction quickSort(array, left, right) {\n  if (left < right) {\n    swap(array, , right)\n    // 随机取值，然后和末尾交换，这样做比固定取一个位置的复杂度略低\n    let indexs = part(array, parseInt(Math.random() * (right - left + 1)) + left, right);\n    quickSort(array, left, indexs[0]);\n    quickSort(array, indexs[1] + 1, right);\n  }\n}\nfunction part(array, left, right) {\n  let less = left - 1;\n  let more = right;\n  while (left < more) {\n    if (array[left] < array[right]) {\n      // 当前值比基准值小，`less` 和 `left` 都加一\n\t   ++less;\n       ++left;\n    } else if (array[left] > array[right]) {\n      // 当前值比基准值大，将当前值和右边的值交换\n      // 并且不改变 `left`，因为当前换过来的值还没有判断过大小\n      swap(array, --more, left);\n    } else {\n      // 和基准值相同，只移动下标\n      left++;\n    }\n  }\n  // 将基准值和比基准值大的第一个值交换位置\n  // 这样数组就变成 `[比基准值小, 基准值, 比基准值大]`\n  swap(array, right, more);\n  return [less, more];\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"面试题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#面试题","aria-hidden":"true"}},[this._v("#")]),this._v(" 面试题")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("var sortColors = function(nums) {\n  let left = -1;\n  let right = nums.length;\n  let i = 0;\n  // 下标如果遇到 right，说明已经排序完成\n  while (i < right) {\n    if (nums[i] == 0) {\n      swap(nums, i++, ++left);\n    } else if (nums[i] == 1) {\n      i++;\n    } else {\n      swap(nums, i, --right);\n    }\n  }\n};\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("var findKthLargest = function(nums, k) {\n  let l = 0\n  let r = nums.length - 1\n  // 得出第 K 大元素的索引位置\n  k = nums.length - k\n  while (l < r) {\n    // 分离数组后获得比基准树大的第一个元素索引\n    let index = part(nums, l, r)\n    // 判断该索引和 k 的大小\n    if (index < k) {\n      l = index + 1\n    } else if (index > k) {\n      r = index - 1\n    } else {\n      break\n    }\n  }\n  return nums[k]\n};\nfunction part(array, left, right) {\n  let less = left - 1;\n  let more = right;\n  while (left < more) {\n    if (array[left] < array[right]) {\n\t   ++less;\n       ++left;\n    } else if (array[left] > array[right]) {\n      swap(array, --more, left);\n    } else {\n      left++;\n    }\n  }\n  swap(array, right, more);\n  return more;\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"堆排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#堆排序","aria-hidden":"true"}},[this._v("#")]),this._v(" 堆排序")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("大根堆是某个节点的所有子节点的值都比他小")]),e("li",[this._v("小根堆是某个节点的所有子节点的值都比他大")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("堆排序的原理就是组成一个大根堆或者小根堆。以小根堆为例，某个节点的左边子节点索引是 "),e("code",[this._v("i * 2 + 1")]),this._v("，右边是 "),e("code",[this._v("i * 2 + 2")]),this._v("，父节点是 "),e("code",[this._v("(i - 1) /2")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("首先遍历数组，判断该节点的父节点是否比他小，如果小就交换位置并继续判断，直到他的父节点比他大")]),e("li",[this._v("重新以上操作 1，直到数组首位是最大值")]),e("li",[this._v("然后将首位和末尾交换位置并将数组长度减一，表示数组末尾已是最大值，不需要再比较大小")]),e("li",[this._v("对比左右节点哪个大，然后记住大的节点的索引并且和父节点对比大小，如果子节点大就交换位置")]),e("li",[this._v("重复以上操作 3 - 4 直到整个数组都是大根堆。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function heap(array) {\n  checkArray(array);\n  // 将最大值交换到首位\n  for (let i = 0; i < array.length; i++) {\n    heapInsert(array, i);\n  }\n  let size = array.length;\n  // 交换首位和末尾\n  swap(array, 0, --size);\n  while (size > 0) {\n    heapify(array, 0, size);\n    swap(array, 0, --size);\n  }\n  return array;\n}\n\nfunction heapInsert(array, index) {\n  // 如果当前节点比父节点大，就交换\n  while (array[index] > array[parseInt((index - 1) / 2)]) {\n    swap(array, index, parseInt((index - 1) / 2));\n    // 将索引变成父节点\n    index = parseInt((index - 1) / 2);\n  }\n}\nfunction heapify(array, index, size) {\n  let left = index * 2 + 1;\n  while (left < size) {\n    // 判断左右节点大小\n    let largest =\n      left + 1 < size && array[left] < array[left + 1] ? left + 1 : left;\n    // 判断子节点和父节点大小\n    largest = array[index] < array[largest] ? largest : index;\n    if (largest === index) break;\n    swap(array, index, largest);\n    index = largest;\n    left = index * 2 + 1;\n  }\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"系统自带排序实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#系统自带排序实现","aria-hidden":"true"}},[this._v("#")]),this._v(" 系统自带排序实现")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/4/18/162d7df247dcda00?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"搜索二叉树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#搜索二叉树","aria-hidden":"true"}},[this._v("#")]),this._v(" 搜索二叉树")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"其他"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他","aria-hidden":"true"}},[this._v("#")]),this._v(" 其他")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"介绍下设计模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍下设计模式","aria-hidden":"true"}},[this._v("#")]),this._v(" 介绍下设计模式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"工厂模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式","aria-hidden":"true"}},[this._v("#")]),this._v(" 工厂模式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("class Man {\n  constructor(name) {\n    this.name = name\n  }\n  alertName() {\n    alert(this.name)\n  }\n}\n\nclass Factory {\n  static create(name) {\n    return new Man(name)\n  }\n}\n\nFactory.create('yck').alertName()\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("当然工厂模式并不仅仅是用来 new 出"),e("strong",[this._v("实例")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("export function createComponent (\n  Ctor: Class<Component> | Function | Object | void,\n  data: ?VNodeData,\n  context: Component,\n  children: ?Array<VNode>,\n  tag?: string\n): VNode | Array<VNode> | void {\n    \n    // 逻辑处理...\n  \n  const vnode = new VNode(\n    `vue-component-${Ctor.cid}${name ? `-${name}` : ''}`,\n    data, undefined, undefined, undefined, context,\n    { Ctor, propsData, listeners, tag, children },\n    asyncFactory\n  )\n\n  return vnode\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在上述代码中，我们可以看到我们只需要调用 "),e("code",[this._v("createComponent")]),this._v(" 传入参数就能创建一个组件实例，但是创建这个实例是很复杂的一个过程，工厂帮助我们隐藏了这个复杂的过程，只需要一句代码调用就能实现功能。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"单例模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单例模式","aria-hidden":"true"}},[this._v("#")]),this._v(" 单例模式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("class Singleton {\n  constructor() {}\n}\n\nSingleton.getInstance = (function() {\n  let instance\n  return function() {\n    if (!instance) {\n      instance = new Singleton()\n    }\n    return instance\n  }\n})()\n\nlet s1 = Singleton.getInstance()\nlet s2 = Singleton.getInstance()\nconsole.log(s1 === s2) // true\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("let Vue // bind on install\n\nexport function install (_Vue) {\n  if (Vue && _Vue === Vue) {\n    // ...\n    return\n  }\n  Vue = _Vue\n  applyMixin(Vue)\n}\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"适配器模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#适配器模式","aria-hidden":"true"}},[this._v("#")]),this._v(" 适配器模式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("class Plug {\n  getName() {\n    return '港版插头'\n  }\n}\n\nclass Target {\n  constructor() {\n    this.plug = new Plug()\n  }\n  getName() {\n    return this.plug.getName() + ' 适配器转二脚插头'\n  }\n}\n\nlet target = new Target()\ntarget.getName() // 港版插头 适配器转二脚插头\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在 Vue 中，我们其实经常使用到适配器模式。比如父组件传递给子组件一个时间戳属性，组件内部需要将时间戳转为正常的日期显示，一般会使用 "),e("code",[this._v("computed")]),this._v(" 来做转换这件事情，这个过程就使用到了适配器模式。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"装饰模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#装饰模式","aria-hidden":"true"}},[this._v("#")]),this._v(" 装饰模式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function readonly(target, key, descriptor) {\n  descriptor.writable = false\n  return descriptor\n}\n\nclass Test {\n  @readonly\n  name = 'yck'\n}\n\nlet t = new Test()\n\nt.yck = '111' // 不可修改\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("import { connect } from 'react-redux'\nclass MyComponent extends React.Component {\n    // ...\n}\nexport default connect(mapStateToProps)(MyComponent)\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"代理模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代理模式","aria-hidden":"true"}},[this._v("#")]),this._v(" 代理模式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("<ul id=\"ul\">\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n    <li>4</li>\n    <li>5</li>\n</ul>\n<script>\n    let ul = document.querySelector('#ul')\n    ul.addEventListener('click', (event) => {\n        console.log(event.target);\n    })\n<\/script>\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("因为存在太多的 "),e("code",[this._v("li")]),this._v("，不可能每个都去绑定事件。这时候可以通过给父节点绑定一个事件，让父节点作为代理去拿到真实点击的节点。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"发布-订阅模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#发布-订阅模式","aria-hidden":"true"}},[this._v("#")]),this._v(" 发布-订阅模式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("<ul id=\"ul\"></ul>\n<script>\n    let ul = document.querySelector('#ul')\n    ul.addEventListener('click', (event) => {\n        console.log(event.target);\n    })\n<\/script>\n复制代码\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在 Vue 中，如何实现响应式也是使用了该模式。对于需要实现响应式的对象来说，在 "),e("code",[this._v("get")]),this._v(" 的时候会进行依赖收集，当改变了对象的属性时，就会触发派发更新。")])}],!1,null,null,null);e.default=r.exports}}]);